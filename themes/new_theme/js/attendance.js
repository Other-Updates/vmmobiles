// JavaScript Documentedit_count = 0;var attendance_threshold;var to_clone;$(document).ready(function () {    attendance_threshold = parseFloat($("#attendance_threshold").val());    month_starting_date = $("#month_starting_date").val();    week_starting_day = $("#week_starting_day").val();    $(".date").hide();    $(".half_option").hide();    var d = new Date();    $(".close").click(function () {        $('.modal').modal('hide');        //$(".modal-backdrop").hide();    });    $("#count_change").change(function () {        /*var users = GetParameterValues('users');         if(users!=undefined)	*/        $.ajax({            url: BASE_URL + "api/set_show_count/",            type: "POST",            data: {show_count: $(this).val(), class: ct_class, method: ct_method},            success: function (res)            {                //window.location = window.location.pathname;                var pathArray = window.location.pathname.split('/');                var newPathname = "";                for (i = 0; i < pathArray.length; i++) {                    if (i == 0)                    {                        newPathname += pathArray[i];                    } else if (i != pathArray.length - 1)                    {                        newPathname += "/";                        newPathname += pathArray[i];                    }                }                new_path = window.location.protocol + "//" + window.location.host + newPathname + "/";                window.location = new_path;            }        });    });    $("#print").unbind("click").click(function () {        window.print();    });    $(".reset").click(function () {        $.ajax({            url: BASE_URL + "api/reset_session/",            type: "POST",            data: {class: ct_class, method: ct_method},            success: function (res)            {                window.location = window.location.pathname;            }        });    });    $("#go").click(function () {        if ($("#year_select").val() != "" && $("#month_select").val() != "")        {            if ($('select[name="user_type"]').val() == 1)            {                if ($("#date_select").val() == null)                {                    alert("You must select week for Daily / Weekly users");                    return false;                }            }        } else        {            alert("Please select Year & Month");            return false;        }    });    $(".user_type").change(function () {        var txt = "<option value=''>Select Month</option>";        if ($(this).val() == 1)        {            $("#date_th").show();            if ($.trim($("#year_select").val()) == d.getFullYear())            {                for (i = 0; i <= d.getMonth(); i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            } else            {                for (i = 0; i <= 11; i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            }        } else if ($(this).val() == 2)        {            $("#date_th").hide();            if ($.trim($("#year_select").val()) == d.getFullYear())            {                for (i = 0; i <= d.getMonth() - 1; i++)                {                    if (i == d.getMonth())                    {                        if (d.getDate() > month_starting_date)                            txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                    } else                        txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            } else            {                for (i = 0; i <= 11; i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            }        }        $("#month_select").html(txt);    });    $("#month_select").change(function () {        //$("#date_select").multiselect('destroy')        if ($(this).val() != 0) {            list = "";            var getTot = daysInMonth($(this).val(), $("#year_select").val()); //Get total days in a month            month_st_date = $("#year_select").val() + "-" + $(this).val() + "-1";            month_et_date = $("#year_select").val() + "-" + $(this).val() + "-" + getTot;            $("#month_start_date").val(month_st_date);            $("#month_end_date").val(month_et_date);            var sat = new Array();   //Declaring array for inserting Saturdays            for (var i = 1; i <= getTot; i++) {    //looping through days in month                var newDate = new Date($("#year_select").val(), $(this).val() - 1, i);                if (newDate.getDay() == week_starting_day) {   //if Saturday                    sat.push(i);                }            }            list = "";            if ($("#year_select").val() == d.getFullYear())            {                if (d.getMonth() + 1 == $(this).val())                {                    for (k = 0; k < sat.length; k++)                    {                        if (parseInt(sat[k] + 6) < d.getDate())                        {                            current = sat[k] + "-" + $(this).val() + "-" + $("#year_select").val();                            list += "<option value='" + sat[k] + "'>" + sat[k] + "-" + $("#month_select option:selected").text() + "</option>";                        }                    }                } else                {                    for (k = 0; k < sat.length; k++)                    {                        current = sat[k] + "-" + $(this).val() + "-" + $("#year_select").val();                        list += "<option value='" + sat[k] + "'>" + sat[k] + "-" + $("#month_select option:selected").text() + "</option>";                    }                }            } else            {                for (k = 0; k < sat.length; k++)                {                    current = sat[k] + "-" + $(this).val() + "-" + $("#year_select").val();                    list += "<option value='" + sat[k] + "'>" + sat[k] + "-" + $("#month_select option:selected").text() + "</option>";                }            }            $("#date_select").html(list);            $("#date_select").multiselect('rebuild');            if (month_starting_date != 1)            {                end_date = parseInt(month_starting_date) - 1;                end_month = parseInt($(this).val()) + 1;                end_year = parseInt($("#year_select").val()) + 1;                if ($(this).val() != 12)                {                    $("#start_date").val($("#year_select").val() + "-" + $(this).val() + "-" + month_starting_date);                    $("#end_date").val($("#year_select").val() + "-" + end_month + "-" + end_date);                } else                {                    $("#start_date").val($("#year_select").val() + "-" + $(this).val() + "-" + month_starting_date);                    $("#end_date").val(end_year + "-1-" + end_date);                }            } else            {                end_date = daysInMonth($(this).val(), $("#year_select").val());                end_year = parseInt($("#year_select").val()) + 1;                $("#start_date").val($("#year_select").val() + "-" + $(this).val() + "-" + month_starting_date);                $("#end_date").val($("#year_select").val() + "-" + $(this).val() + "-" + end_date);            }        }    });    $("#date_select").change(function () {        week_selected = $(this).val().toString().split(",");        diff = 0;        for (j = 0; j < week_selected.length - 1; j++)        {            if (week_selected[j + 1] - week_selected[j] > 7)                diff = 1;        }        if (diff == 0)        {            //new_value = $(this).val().split("-");            if (week_selected.length == 1)            {                $("#start_date").val($(this).val() + "-" + $("#month_select").val() + "-" + $("#year_select").val());                start = $("#start_date").val().split("-");                date = start[1] + "/" + start[0] + "/" + start[2];                var startDate = new Date(date);                var endDate = new Date(date);                endDate.setDate(endDate.getDate() + parseInt(6));                $("#start_date").val($.trim(start[2]) + "-" + start[1] + "-" + start[0]);                $("#end_date").val(endDate.getFullYear() + "-" + (endDate.getMonth() + 1) + "-" + endDate.getDate());            } else            {                max_week = Math.max.apply(Math, week_selected);                min_week = Math.min.apply(Math, week_selected);                $("#start_date").val(min_week + "-" + $("#month_select").val() + "-" + $("#year_select").val());                max_day = max_week + "-" + $("#month_select").val() + "-" + $("#year_select").val();                start = max_day.split("-");                date = start[1] + "/" + start[0] + "/" + start[2];                var startDate = new Date(date);                var endDate = new Date(date);                endDate.setDate(endDate.getDate() + parseInt(6));                $("#start_date").val($("#year_select").val() + "-" + $("#month_select").val() + "-" + min_week);                $("#end_date").val(endDate.getFullYear() + "-" + (endDate.getMonth() + 1) + "-" + endDate.getDate());            }        } else        {            alert("you must select sequential weeks");            for (j = 0; j < week_selected.length; j++)            {                $("#date_select").multiselect('deselect', week_selected[j]);            }            if (month_starting_date != 1)            {                end_date = parseInt(month_starting_date) - 1;                end_month = parseInt($("#month_select").val()) + 1;                if ($(this).val() != 12)                {                    $("#start_date").val($("#year_select").val() + "-" + $("#month_select").val() + "-" + month_starting_date);                    $("#end_date").val($("#year_select").val() + "-" + end_month + "-" + end_date);                } else                {                    $("#start_date").val($("#year_select").val() + "-" + $("#month_select").val() + "-" + month_starting_date);                    $("#end_date").val($("#year_select").val() + 1 + "-1-" + end_date);                }            } else            {                end_date = daysInMonth($("#month_select").val(), $("#year_select").val());                end_year = parseInt($("#year_select").val()) + 1;                $("#start_date").val($("#year_select").val() + "-" + $("#month_select").val() + "-" + month_starting_date);                $("#end_date").val($("#year_select").val() + "-" + $("#month_select").val() + "-" + end_date);            }        }    });    function daysInMonth(month, year) {        return new Date(year, month, 0).getDate();    }    $(".type_select").change(function () {        modal_id = ($(this).closest('.modal').attr("id"));        if ($(this).val() == 1)        {            $(".half_option").show();            $(".datetimepicker").removeClass('hasDatepicker');            $(".leave_from").hide();            $(".leave_to").hide();            $(".leave_type").show();            $(".date").show();            $(".lop_td").hide();            $('.datepicker').datepicker({dateFormat: 'd-m-yy'});        } else if ($(this).val() == 2 || $(this).val() == 4 || $(this).val() == 6)        {            //alert($(this).val());            $(".lop_td").show();            $(".half_option").hide();            if ($(".leave_from1").hasClass("hasDatepicker")) {                $('.leave_from1').each(function (i) {                    this.id = 'datetimepicker' + i;                    $(this).val('');                }).removeClass('hasDatepicker').datepicker({dateFormat: 'd-m-yy', onClose: function () {                        $(".leave_to1").val("");                        if ($(".leave_to1").hasClass("hasDatepicker"))                        {                            $(".leave_to1").removeClass('hasDatepicker')                        }                        $(".leave_to1").datepicker({dateFormat: 'd-m-yy', minDate: $(this).datepicker('getDate')});                    }                });            } else            {                from = $("#" + modal_id).find(".leave_from1").val();                $(".leave_to1").datepicker({dateFormat: 'd-m-yy', minDate: from});                //alert(from);                $(".leave_from1").datepicker({dateFormat: 'd-m-yy', onClose: function () {                        $(".leave_to1").val("");                        if ($(".leave_to1").hasClass("hasDatepicker"))                        {                            $(".leave_to1").removeClass('hasDatepicker')                        }                        $(".leave_to1").datepicker({dateFormat: 'd-m-yy', minDate: $(this).datepicker('getDate')});                    }                });            }            if ($(this).val() == 4)            {                $("#leave_f").html("Compoff From");                $("#leave_t").html("Compoff To");                $(".leave_type").hide();                $(".lop_td").hide();            } else if ($(this).val() == 2)            {                $("#leave_f").html("Leave From");                $("#leave_t").html("Leave To");                $(".leave_type").show();                $(".lop_td").show();            } else if ($(this).val() == 6)            {                $("#leave_f").html("Leave From");                $("#leave_t").html("Leave To");                $(".leave_type").hide();                $(".lop_td").hide();            }            $(".leave_from").show();            $(".leave_to").show();            $(".date").hide();        }        /*else if($(this).val()==3)         {         $(".half_option").hide();         $(".leave_from").show();         $(".leave_to").show();         $(".date").hide();         $(".leave_type").hide();         $("#leave_f").html("Permission From");         $("#leave_t").html("Permission To");         $(".leave_from").removeClass('hasDatepicker').datetimepicker({dateFormat:'d-m-yy',yearRange: '1945:'+(new Date).getFullYear(),onClose:function()         {         if($(".leave_to").hasClass("hasDatepicker"))         {         $(".leave_to").removeClass('hasDatepicker')         }         //$(this).val();         $(".leave_to").datetimepicker({dateFormat:'d-m-yy',minDate:$(this).datepicker('getDate'),yearRange: '1945:'+(new Date).getFullYear()});         }         });         }*/    });    $(".multiselect").multiselect({        includeSelectAllOption: true,        enableFiltering: true    });    /*$(".week").multiselect({     includeSelectAllOption: true,     enableFiltering: true     });     /*$("#designation_select").multiselect({     includeSelectAllOption: true,     enableFiltering: true     });     $("#shift_select").multiselect({     includeSelectAllOption: true,     enableFiltering: true     });*/    month = new Array("Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec");    $("#year_select").change(function () {        month = new Array("Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec");        var txt = "<option value=''>Select Month</option>";        if ($(this).val() != 0)        {            var doj = $("#doj").val().split("-");            if ($.trim($(this).val()) == doj[0] && $.trim($(this).val()) == d.getFullYear())            {                if (doj[2] < month_starting_date)                    i = doj[1] - 2;                else                    i = doj[1] - 1;                for (; i <= d.getMonth(); i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            } else if ($.trim($(this).val()) == doj[0])            {                //alert(parseInt(06));                if (parseInt(doj[2]) < month_starting_date)                    i = doj[1] - 2;                else                    i = doj[1] - 1;                for (; i <= 11; i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            } else if ($.trim($(this).val()) == d.getFullYear())            {                for (i = 0; i <= d.getMonth(); i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            } else            {                for (i = 0; i <= 11; i++)                {                    txt = txt + "<option value=" + (i + 1) + ">" + month[i] + "</option>";                }            }        }        $("#month_select").html(txt);    });    /*$('.time_in').timepicker({minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },onClose:function(){     in_time = $(this).val();     if(in_time!=undefined)     {     s = in_time.split(':');     ind = $(this).timepicker('getMinute')+1;     $(this).next("input").val('');     if($(this).next("input").hasClass("hasTimepicker")){     $(this).next("input").removeClass('hasTimepicker')     }     $(this).next("input").timepicker({     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },     minTime: {     hour: s[0] ,     minute: ind// previous to min time     },onClose:function(){     out_time =$(this).val();     s = in_time.split(':');     e = out_time.split(':');     $(this).closest("tr").children("td.break_td").children("input.in_break").timepicker({     minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: s[0] ,     minute: ind// previous to min time     },     maxTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: e[0] ,         // after max time     minute: $(this).timepicker('getMinute')-1     },     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },     onClose:function(){     ins = $(this).val().split(':');     $(this).next("input").val('');     if($(this).next("input").hasClass("hasTimepicker")){     $(this).next("input").removeClass('hasTimepicker')     }     $(this).next("input").timepicker({     minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: ins[0] ,     minute: $(this).timepicker('getMinute')+1// previous to min time     },     maxTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: e[0] ,         // after max time     minute: e[1]     },     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },onClose:function(){     in_time1 = $(this).closest("tr").children("td").children("input.time_in").val();     out_time1 = $(this).closest("tr").children("td").children("input.time_out").val();     dif =  diff(in_time1,out_time1);     time1 = $(this).closest("tr").children("td.break_td").children("input.in_break").val();     time2 = $(this).closest("tr").children("td.break_td").children("input.out_break").val();     if(time1!="" && time2!="")     {     value_for_break =diff(time1,time2);     //alert(time1);     hour =0;     mint =0;     if($(this).closest("tr").children("td.break_td").children("span").length>=1)     {     elements = $(this).closest("tr").children("td.break_td").children("span");     for(k=0;k<elements.length;k++)     {     if($(elements[k]).children("input.in_break").val()!="")     {     new_val = diff($(elements[k]).children("input.in_break").val(),$(elements[k]).children("input.out_break").val());     in_val = new_val.split(':');     hour = hour + parseInt(in_val[0]);     mint = mint + parseInt(in_val[1]);     if(mint>60)     {     hour = hour +parseInt(mint/60);     mint = mint + parseInt(mint%60);     }     }     }     }     in_val1 = value_for_break.split(':');     new_hour = parseInt(hour)+parseInt(in_val1[0]);     new_mint = parseInt(mint)+parseInt(in_val1[1]);     value_for_break = new_hour+":"+new_mint;     new_overall = dif.split(':');     break_val = value_for_break.split(":");     new_values = (parseInt(new_overall[0])* 60 +parseInt(new_overall[1]))-(parseInt(break_val[0])+parseInt(break_val[1]));     new_hour2 = new_values/60;     new_mint2 = new_values%60;     if(new_hour2<10)     new_hour2="0"+new_hour2;     if(new_mint2<10)     new_mint2="0"+new_mint2;     total_hour = Math.floor(new_hour2)+":"+new_mint2;     $(this).parent().parent().children("td.total_hours").children(".total_diff").html(total_hour);     $(this).parent().parent().children("td.total_hours").children("input:hidden").val(total_hour);     }     },     });     }     });     //Time in and time out calculation     //console.log($(this).closest("tr").children("td.break_td"));     //value_for_break = "0:0";     time1 = $(this).closest("tr").children("td.break_td").children("input.in_break").val();     time2 = $(this).closest("tr").children("td.break_td").children("input.out_break").val();     if(time1!="" && time2!="")     {     value_for_break =diff(time1,time2);     //alert(time1);     hour =0;     mint =0;     if($(this).closest("tr").children("td.break_td").children("span").length>=1)     {     //alert(in_time);     elements = $(this).closest("tr").children("td.break_td").children("span");     for(k=0;k<elements.length;k++)     {     if($(elements[k]).children("input.in_break").val()!="")     {     new_val = diff($(elements[k]).children("input.in_break").val(),$(elements[k]).children("input.out_break").val());     in_val = new_val.split(':');     hour = hour + parseInt(in_val[0]);     mint = mint + parseInt(in_val[1]);     if(mint>60)     {     hour = hour +parseInt(mint/60);     mint = mint + parseInt(mint%60);     }     }     }     }     in_time = $(this).closest("tr").children("td").children("input.time_in").val();     out_time = $(this).closest("tr").children("td").children("input.time_out").val();     differ = diff(in_time,out_time);     in_val1 = value_for_break.split(':');     new_hour = parseInt(hour)+parseInt(in_val1[0]);     new_mint = parseInt(mint)+parseInt(in_val1[1]);     value_for_break = new_hour+":"+new_mint;     new_overall = differ.split(':');     break_val = value_for_break.split(":");     new_values = (parseInt(new_overall[0])* 60 +parseInt(new_overall[1]))-(parseInt(break_val[0])+parseInt(break_val[1]));     new_hour2 = new_values/60;     new_mint2 = new_values%60;     if(new_hour2<10)     new_hour2="0"+new_hour2;     if(new_mint2<10)     new_mint2="0"+new_mint2;     total_hour = Math.floor(new_hour2)+":"+new_mint2;     $(this).parent().parent().children("td.total_hours").children(".total_diff").html(total_hour);     $(this).parent().parent().children("td.total_hours").children("input:hidden").val(total_hour);     }     else     {     dif = diff(in_time,out_time);     $(this).parent().closest("tr").children("td.total_hours").children(".total_diff").html(dif);     }     overstart = $(this).closest("tr").children("td.overtime").children(".overtimestart").val();     overend = $(this).parent().parent().children("td.overtime").children(".overtimeend").val();     over1 = overstart.split(":");     over2 = overend.split(":");     if(overstart!=0 && overend!=0)     {     diff1 ='';     if(over1[0]<e[0])     {     if((over2[0]<e[0])||(over2[0]==e[0] && over2[1]<e[1]))     {     diff1 = diff(overstart,overend);     }     else if((over2[0]>e[0])||(over2[0]==e[0] && over2[1]>e[1]))     {     diff1 = diff(overstart,out_time);     }     else if(over2[0]==e[0])     {     diff1 = diff(overstart,overend);     }     $(this).parent().parent().children("td.overtime").children("span.overtime_val").html(diff1)	;     }     else     {     $(this).parent().parent().children("td.overtime").children("span.overtime_val").html('');     }     }     else     {     $(this).parent().parent().children("td.overtime").children("span.overtime_val").html('');     }     }     });     }     }});*/    if (ct_method == "add_attendance" || ct_method == "view_attendance" || ct_method == "view_all_attendance" || ct_method == "view_user_attendance" || ct_method == "add_attendance_for_day") {        br_element = $(".break_to_clone:first");        to_clone = br_element.clone();        to_clone.removeClass("break_to_clone");        to_clone.prepend("<br/>");        to_clone.append('<a class="btn btn-success remove_row " href="javascript:void(0)">-</a>');    }    $(".inc_session").click(function () {        //sess_array = new Array("inc_br1"=>)        checkbox_count = 0;        $(".inc_session").each(function () {            if ($(this).attr("checked"))            {                checkbox_count++;            }        });        span_count = 0;        $(".break_td:first span").each(function () {            span_count++;        });        parent_this = $(this);        id = $(this).attr("id");        lunch_check = $("#inc_lunch").attr("id");        if ($(this).prop("checked")) {            //console.log($(this).attr("id"));            $(".break_td").each(function () {                //if(1) {                if ($(this).find(".inc_br1").length || $(this).find(".inc_br2").length || $(this).find(".inc_lunch").length) {                    ct_array = $(this).find(".break_to_clone .in_break").attr("name");                    /*substring to set breaks array value replaceing [0] to current value*/                    ct_array = ct_array.substring(14, 17);                    ct_array = (ct_array.slice(-1) == "]") ? ct_array : ct_array + "]";                    //ct_array = ct_array.TrimEnd("[".ToCharArray());                    temp = to_clone.clone();                    temp.find(".in_break").attr("name", "break[in_time]" + ct_array + "[]");                    temp.find(".out_break").attr("name", "break[out_time]" + ct_array + "[]");                    temp.addClass(parent_this.attr("id"));                    //if(id!="inc_br1")                    if (checkbox_count <= 2)                        $(this).append(temp);                    else if (checkbox_count == 3 && span_count < 3)                        $(this).append(temp);                } else                {                    $(this).find(".break_to_clone").addClass(parent_this.attr("id"));                }                //}            });        } else {            $(".break_td").each(function () {                if ($(this).find(".break_to_clone").hasClass(parent_this.attr("id"))) {                    var break_val = new Object;                    if (span_count > 1)                    {                        last_span = $(this).find("span:last");                        break_val[$(last_span).attr("class")] = $(last_span).find("input.in_break").val() + "-" + $(last_span).find("input.out_break").val();                        $(this).find("span:last").remove();                    } else if (span_count == 1)                    {                        var clone_ele = ($(this).find(".break_to_clone"));                        clone_ele.find("input").val("");                    }                    $(this).find(".break_to_clone").removeClass(parent_this.attr("id"));                    parent_td = $(this);                    var span_first = 0;                    $(".inc_session").each(function (i) {                        break_val[$(this).attr("id")] = $("." + $(this).attr("id")).find("input.in_break").val() + "-" + $("." + $(this).attr("id")).find("input.out_break").val();                        if ($(this).attr("checked"))                        {                            current = 0;                            if (span_first == 0)                            {                                current = break_val[$(this).attr("id")].split('-');                                $(parent_td).find(".break_to_clone").addClass($(this).attr("id"));                                $(".break_to_clone").find(".in_break").val(current[0]);                                $(".break_to_clone").find(".out_break").val(current[1]);                                span_first = 1;                            } else                            {                                next_span = $(parent_td).find("span");                                for (i = 0; i < next_span.length; i++)                                {                                    if (!$(next_span[i]).hasClass("break_to_clone"))                                    {                                        if (typeof break_val[$(this).attr("id")] != "undefined")                                            current = break_val[$(this).attr("id")].split('-');                                        if ($(next_span[i]).hasClass("inc_lunch"))                                            $(next_span[i]).removeClass("inc_lunch");                                        else if ($(next_span[i]).hasClass("inc_br2"))                                            $(next_span[i]).removeClass("inc_br2");                                        else if ($(next_span[i]).hasClass("inc_br1"))                                            $(next_span[i]).removeClass("inc_br1");                                        $(next_span[i]).addClass($(this).attr("id"));                                        //cur_in = $("."+$(this).attr("id")).find("input.in_break").val();                                        //cur_out = $("."+$(this).attr("id")).find("input.out_break").val();                                        $("." + $(this).attr("id")).find(".in_break").val(current[0]);                                        $("." + $(this).attr("id")).find(".out_break").val(current[1]);                                    }                                }                            }                        }                    });                } else {                    $("." + parent_this.attr("id")).remove();                }            });        }    });    $(".add_row").unbind("click").click(function () {        ct_array = $(this).parent().find(".break_to_clone .in_break").attr("name");        /*substring to set breaks array value replaceing [0] to current value*/        if (ct_method == "add_attendance") {            ct_array = ct_array.substring(14, 17);            ct_array = (ct_array.slice(-1) == "]") ? ct_array : ct_array + "]";        } else if (ct_method == "view_all_attendance" || ct_method == "view_user_attendance") {            ct_array = ct_array.substring(14, 18);            ct_array = (ct_array.slice(-1) == "]") ? ct_array : ct_array + "]";        } else if (ct_method == "view_attendance")        {            ct_array = ct_array.substring(14, 25);            ct_array = (ct_array.slice(-1) == "]") ? ct_array : ct_array + "]";        }        temp = to_clone.clone();        //console.log(ct_array);        temp.find(".in_break").attr("name", "break[in_time]" + ct_array + "[]");        temp.find(".out_break").attr("name", "break[out_time]" + ct_array + "[]");        //temp = to_clone.clone();        $(this).closest(".break_td").append(temp);        in_br = temp.find(".in_break");        add_time_picker(in_br);        $(in_br).removeAttr("disabled");        $(in_br).val("00:00:00");        out_br = temp.find(".out_break");        $(out_br).removeAttr("disabled");        $(out_br).val("00:00:00");        add_time_picker(out_br);    });    /*	$(".add_row").click(function(){     var td = $(this).closest("td");     id=$(td).find(".break").attr("id");     len = $(td).find("input:text").length;     var pattern = /[0-9]+/g;     var matches = id.match(pattern);     //console.log(matches[0]);     var new_val = parseInt(matches[0]);     //console.log(new_val);     input ="<span><br/><input type='text' name='break[in_time]["+new_val+"][]' class='required timepicker1 in_break input-small'><input type='text' name='break[out_time]["+new_val+"][]' class='required timepicker1 out_break input-small'> <a href='#' class='btn btn-success remove_row'><i class='icon-minus icon-black'></i></span>";     //$(td).append("");     $(td).append(input);     /*$('.datepicker').each(function(i) {     this.id = 'datepicker' + i;     }).removeClass('hasDatepicker').datepicker({dateFormat:'d-m-yy'});/*     $('.timepicker1').each(function(i) {     this.id = 'time' + i;     }).removeClass('hasDatepicker');     //$(this).closest("td.break_td").children("input.in_break").val();     in_time = $(this).closest("tr").children("td").children("input.time_in").val();     out_time = $(this).closest("tr").children("td").children("input.time_out").val();     s = in_time.split(':');     e = out_time.split(':');     ind1 = s[1]+1;     ind2 = e[1]-1;     $(".in_break").timepicker({     minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: s[0] ,     minute: ind1// previous to min time     },     maxTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: e[0] ,         // after max time     minute: ind2     },     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },     onClose:function(){     $(this).next("input.out_break").timepicker({     minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: $(this).timepicker('getHour') ,     minute: $(this).timepicker('getMinute')+1// previous to min time     },     maxTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: e[0] ,         // after max time     minute: ind2     },     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },     onClose:function(){     bin_time = $(this).parent().children("input.in_break").val();     bout_time = $(this).parent().children("input.out_break").val();     if(bin_time != '' && bout_time!='')     {     s = bin_time.split(':');     e = bout_time.split(':');     if(s[0]<=e[0])     {     value_for_break = 0;     time1 = $(this).closest("td").children("input.in_break").val();     time2 = $(this).closest("td").children("input.out_break").val();     value_for_break =diff(time1,time2);     if($(this).closest("td").children("span").length>1)     {     elements = $(this).closest("td").children("span");     hour =0;     mint =0;     for(k=0;k<elements.length;k++)     {     new_val = diff($(elements[k]).children("input.in_break").val(),$(elements[k]).children("input.out_break").val());     in_val = new_val.split(':');     hour = hour + parseInt(in_val[0]);     mint = mint + parseInt(in_val[1]);     if(mint>60)     {     hour = hour +parseInt(mint/60);     mint = mint + parseInt(mint%60);     }     }     in_val1 = value_for_break.split(':');     new_hour = parseInt(hour)+parseInt(in_val1[0]);     new_mint = parseInt(mint)+parseInt(in_val1[1]);     value_for_break = new_hour+":"+new_mint;     }     else     {     new_val = diff(bin_time,bout_time);     in_val = new_val.split(':');     in_val1 = value_for_break.split(':');     hour = parseInt(in_val[0])+parseInt(in_val1[0]);     mint = parseInt(in_val[1])+parseInt(in_val1[1]);     value_for_break = hour+":"+mint;     }     time_in_val = $(this).closest("tr").children("td").find("input.time_in").val();     time_out_val = $(this).closest("tr").children("td").find("input.time_out").val();     overalltime = diff(time_in_val,time_out_val);     new_overall = overalltime.split(':');     break_val = value_for_break.split(":");     new_values = (parseInt(new_overall[0])* 60 +parseInt(new_overall[1]))-(parseInt(break_val[0])*60+parseInt(break_val[1]));     new_hour2 = new_values/60;     new_mint2 = new_values%60;     if(new_hour2<10)     new_hour2="0"+new_hour2;     if(new_mint2<10)     new_mint2="0"+new_mint2;     total_hour = Math.floor(new_hour2)+":"+new_mint2;     //alert(total_hour);     $(this).closest("tr").children("td.total_hours").children("span").html(total_hour);     }     }     }     });     }     });     }); */    $("#department_select").change(function () {        $.ajax({            url: BASE_URL + "masters/get_designations/",            type: 'POST',            data: {                department: $(this).val()            },            success: function (res) {                $("#designation").html(res);                $("#designation_select").multiselect({                    includeSelectAllOption: true,                    enableFiltering: true                });            }        });        /*$.ajax({         url:BASE_URL+"masters/get_shift_by_department/",         type:'POST',         data:{         department:$(this).val()         },         success:function(res){         $("#shift").html(res);         $("#shift_select").multiselect({         includeSelectAllOption: true,         enableFiltering: true         });         }         });*/    });    $(".generate-random-all").click(function () {        if ($(this).is(':checked')) {            $(".generate-random:not(.no_attendance)").prop('checked', true);            $(".generate-random").trigger("change");        } else {            $(".generate-random").prop('checked', false);            $(".generate-random").trigger("change");        }    });    $(".add-filter").change(function () {        //remove_row_length = $(".remove_row").length;        //console.log(remove_row_length);        //for (var i = 1; i >= remove_row_length; i++) {        $(".remove_row").trigger("click");        //add_row_length = $(".add-filter:checked").length;    });    /*$("#inc_br1").click(function(){     check_count=0;     var k = $(this).attr("checked");     $(".inc_session").each(function(){     if($(this).attr("checked"))     {     check_count++;     }     });     if(check_count==0 && k!="checked")     {     $(".in_break,.out_break").each(function(){     $(this).val('');     });     }     });*/    $(".generate-random").change(function () {        time_in = $(this).closest("tr").find(".time_in");        time_out = $(this).closest("tr").find(".time_out");        inc_ses = new Array();        inc_timings = new Array();        inc_ses["inc_br1"] = $("#inc_br1").prop('checked');        inc_ses["inc_br2"] = $("#inc_br2").prop('checked');        inc_ses["inc_lunch"] = $("#inc_lunch").prop('checked');        inc_timings["inc_br1"] = "break_first";        inc_timings["inc_br2"] = "break_second";        inc_timings["inc_lunch"] = "lunch";        if ($(this).is(':checked')) {            orig_time_in = time_in.attr("shift_in_time").split(":");            orig_time_out = time_out.attr("shift_out_time").split(":");            time_in_random = randomTime(orig_time_in, attendance_threshold, 'minus');            time_out_random = randomTime(orig_time_out, attendance_threshold, 'plus');            time_in.val(time_in_random.getHours() + ":" + time_in_random.getMinutes() + ":" + time_in_random.getSeconds());            time_out.val(time_out_random.getHours() + ":" + time_out_random.getMinutes() + ":" + time_out_random.getSeconds());            for (key in inc_ses) {                if (inc_ses[key]) {                    break_in = $(this).closest("tr").find("." + key + " .in_break");                    break_out = $(this).closest("tr").find("." + key + " .out_break");                    if (br1_time_in = $(this).closest("tr").find("." + inc_timings[key] + "_in").length) {                        br1_time_in = $(this).closest("tr").find("." + inc_timings[key] + "_in").val().split(":");                        br1_time_out = $(this).closest("tr").find("." + inc_timings[key] + "_out").val().split(":");                        br_duration = diff($(this).closest("tr").find("." + inc_timings[key] + "_in").val(), $(this).closest("tr").find("." + inc_timings[key] + "_out").val());                        br_duration = br_duration.split(":");                        br1_in_random = randomTime(br1_time_in, attendance_threshold, 'minus');                        //Math.floor(Math.random() * (max - min + 1)) + min;                        max = parseInt(br_duration[1]) - 1;                        min = Math.floor(max / 2) + ((1 < max) ? 1 : 0);                        br_min = Math.floor(Math.random() * (max - min + 1)) + min;                        br1_out_random = new Date(br1_in_random);                        br1_out_random.setMinutes(br1_out_random.getMinutes() + br_min);                        br1_out_random.setSeconds(Math.floor(Math.random() * 59) + 1);                        //br1_out_random = randomTime(br1_time_out,attendance_threshold,'minus');                        break_in.val(br1_in_random.getHours() + ":" + br1_in_random.getMinutes() + ":" + br1_in_random.getSeconds());                        break_out.val(br1_out_random.getHours() + ":" + br1_out_random.getMinutes() + ":" + br1_out_random.getSeconds());                    }                }            }        } else {            time_in.val("");            time_out.val("");            for (key in inc_ses) {                if (inc_ses[key]) {                    $(this).closest("tr").find("." + key + " input:text").val("");                }            }        }        $(this).closest("tr").find("input:text").trigger("change");    });    //  Math.floor(Math.random() * (max - min + 1)) + min;    function randomTime(timearray, threshold, eval) {        datetime = new Date();        timearray[1] = parseInt(timearray[1]);        if (eval == "plus") {            random_minutes_value = Math.floor(Math.random() * ((timearray[1] + threshold) - timearray[1] + 1) + (timearray[1]));            //console.log(random_minutes_value);        } else {            random_minutes_value = Math.floor(Math.random() * ((timearray[1] + threshold) - (timearray[1] - threshold) + 1)) + (timearray[1] - threshold);        }        random_seconds_value = Math.floor(Math.random() * ((60 - 0 + 1) + 0));        datetime.setHours(timearray[0], (random_minutes_value - 1), random_seconds_value);        return datetime;    }    //Add random attendance- End    $(".edit").click(function () {        edit_count++;        $(this).closest("tr").find("input.time_in").show();        $(this).closest("tr").find("input.day_value").removeAttr("disabled");        $(this).closest("tr").find("input:text").removeAttr("disabled");        $(this).closest("tr").find("input.time_out").show();//("display","block");        $(this).closest("tr").find("span.time_calc").hide();        $(this).closest("tr").find(".in_break").show();        $(this).closest("tr").find(".out_break").show();        $(this).closest("tr").find("span.break_time").hide();        $(this).closest("tr").find(".add_row").show();        $(this).closest("tr").find(".remove_row").show();        $(this).closest("tr").find("td.action").children("a.edit").hide();        $(this).closest("tr").find("td.action").children("a.cancel").show();        $(".save").show();        elem = $(this).closest("tr").find(".time_in,.time_out,.in_break,.out_break");        add_time_picker(elem);        $("#back_btn,#print,#apply_btn").hide();    });    $(".cancel").click(function () {        $(this).closest("tr").find("input.time_in").hide();        $(this).closest("tr").find("input.time_out").hide();//("display","block");        $(this).closest("tr").find("span.time_calc").show();        $(this).closest("tr").find("input.day_value").attr("disabled", "disabled");        $(this).closest("tr").find("input:text").attr("disabled", "disabled");        $(this).closest("tr").find(".in_break").hide();        $(this).closest("tr").find(".out_break").hide();        $(this).closest("tr").find("span.break_time").show();        $(this).closest("tr").find(".add_row").hide();        $(this).closest("tr").find(".remove_row").hide();        $(this).closest("tr").find("td.action").children("a.edit").show();        $(this).closest("tr").find("td.action").children("a.cancel").hide();        edit_count--;        if (edit_count == 0)        {            $(".save").hide();            $("#back_btn,#print,#apply_btn").show();        } else        {            $(".save").show();            $("#back_btn,#print,#apply_btn").hide();        }    });    if (ct_method == "add_attendance" || ct_method == "add_attendance_for_day")        add_time_picker();});$("input:text").live("change", function () {    //if(!$(this).closest("tr").find(".no_attendance").length) {    in_time = $(this).closest("tr").find("input.time_in").val();    out_time_elem = $(this).closest("tr").find("input.time_out");    out_time = out_time_elem.val();    other_sess = new Array();    i = 0;    main_diff = diff(in_time, out_time);    side_diff = main_diff;    $(this).closest("tr").find(".in_break").each(function () {        i = diff($(this).val(), $(this).parent().find(".out_break").val());        side_diff = sub_time(side_diff, i);    });    if (out_time_elem.attr("overtime_in")) {        min_shift = min_date(out_time, out_time_elem.attr("overtime_in"));        min_ot = min_date(out_time, out_time_elem.attr("overtime_out"));        if ((out_time_elem.attr("overtime_in") == min_shift) && out_time_elem.attr("overtime_out") && out_time) {            //	console.log("came");            out_time_hours = out_time.split(":");            out_time_hours = out_time_hours[0];            ot_end = out_time_elem.attr("overtime_out");            ot_end_hours = ot_end.split(":");            ot_end_hours = ot_end_hours[0];            if (ot_end == min_ot) {                out_time = ot_end;            }            ot_total = diff(min_shift, out_time);            $(this).closest("tr").find(".overtime").text(ot_total);        } else {            $(this).closest("tr").find(".overtime").text("");        }    }    $(this).closest("tr").find(".total_hours").text(side_diff);    //}});$(".remove_row").live("click", function () {    $(this).closest("span").remove();});function diff(start, end) {    start = start.split(":");    end = end.split(":");    start[2] = (typeof start[2] == "undefined") ? 0 : start[2];    end[2] = (typeof end[2] == "undefined") ? 0 : end[2];    end[3] = (parseInt(end[0]) < parseInt(start[0])) ? 2 : 1;    var startDate = new Date(2011, 1, 1, start[0], start[1], start[2]);    var endDate = new Date(2011, 1, end[3], end[0], end[1], end[2]);    var diff = endDate.getTime() - startDate.getTime();    var hours = Math.floor(diff / 1000 / 60 / 60);    diff -= hours * 1000 * 60 * 60;    var minutes = Math.floor(diff / 1000 / 60);    diff -= minutes * 1000 * 60;    var seconds = Math.floor(diff / 1000);    diff -= seconds * 1000;    hours = (isNaN(hours)) ? 0 : hours;    minutes = (isNaN(minutes)) ? 0 : minutes;    seconds = (isNaN(seconds)) ? 0 : seconds;    //  console.log(hours+ "--"+minutes+"--"+seconds);    return (hours <= 9 ? "0" : "") + hours + ":" + (minutes <= 9 ? "0" : "") + minutes + ":" + (seconds <= 9 ? "0" : "") + seconds;}function sub_time(start, end) {    start = start.split(":");    end = end.split(":");    start[2] = (typeof start[2] == "undefined") ? 0 : start[2];    end[2] = (typeof end[2] == "undefined") ? 0 : end[2];    end[3] = (end[1] < start[1]) ? 1 : 0;    diff_date = new Date();    var startDate = new Date(0, 0, 0, start[0], start[1], start[2]);    diff_date.setHours(startDate.getHours() - parseInt(end[0]));    diff_date.setMinutes(startDate.getMinutes() - parseInt(end[1]));    diff_date.setSeconds(startDate.getSeconds() - parseInt(end[2]));    return diff_date.getHours() + ":" + diff_date.getMinutes() + ":" + diff_date.getSeconds();    // return (hours <= 9 ? "0" : "") + hours + ":" + (minutes <= 9 ? "0" : "") + minutes + ":" + (seconds <= 9 ? "0" : "") + seconds;}function min_date(date1, date2) {    date1 = date1.split(":");    date2 = date2.split(":");    date1[2] = (typeof date1[2] == "undefined") ? 0 : date1[2];    date2[2] = (typeof date2[2] == "undefined") ? 0 : date2[2];    date1 = new Date(0, 0, 0, date1[0], date1[1], date1[2]);    date2 = new Date(0, 0, 0, date2[0], date2[1], date2[2]);    // convert both dates in milliseconds and use Math.min function    minDate = Math.min(date1.valueOf(), date2.valueOf());    // convert minDate to Date    date = new Date(minDate);    return (date.getHours() <= 9 ? "0" : "") + date.getHours() + ":" + (date.getMinutes() <= 9 ? "0" : "") + date.getMinutes() + ":" + (date.getSeconds() <= 9 ? "0" : "") + date.getSeconds();}function add_time_picker(elem) {    if (typeof elem == "undefined") {        elem = ".time_in,.time_out,.in_break,.out_break";    }    $(elem).timepicker({        minutes: {            starts: 0, // First displayed minute            ends: 59, // Last displayed minute            interval: 1,        }    });}
// JavaScript Documentregular_start = 0;regular_end = 0;regular_s_min = 0;regular_e_min = 0;check = 0;var to_clone;var no_ot_clone;var selected_obj = new Object();function time_pick(elem) {    from = elem.find(".from_time");    $(from).timepicker({        minutes: {interval: 1},        showLeadingZero: false,        //onSelect: tpStartSelect,    });    to = elem.find(".to_time");    $(to).timepicker({        minutes: {interval: 1},        showLeadingZero: false,        //onSelect: tpEndSelect,    });}// when start time change, update minimum for end timepickerfunction tpStartSelect(time, endTimePickerInst) {    closest_to_time = $(this).closest("tr").find(".to_time");    closest_to_time.timepicker('option', {        minTime: {            hour: endTimePickerInst.hours,            minute: endTimePickerInst.minutes + 1        }    });}// when end time change, update maximum for start timepickerfunction tpEndSelect(time, startTimePickerInst) {    closest_from_time = $(this).closest("tr").find(".from_time");    closest_from_time.timepicker('option', {        maxTime: {            hour: startTimePickerInst.hours,            minute: startTimePickerInst.minutes        }    });}function manageOptions(elem) {    if (elem.val() != "") {        elem.popover("destroy");    }    elem_tr = $(elem).closest("tr");    regular_from_time = $(".shift_table tbody tr:nth-child(1) .from_time");    regular_to_time = $(".shift_table tbody tr:nth-child(1) .to_time");    if (regular_from_time.val() == "") {        regular_from_time.popover({            trigger: 'manual',            placement: 'top',            title: 'Required',            content: 'Set Regular time before setting Other fields'        });        regular_from_time.popover('show');        elem.val("");    } else if (regular_to_time.val() == "") {        regular_to_time.popover({            trigger: 'manual',            placement: 'top',            title: 'Required',            content: 'Set Regular time before setting Other fields'        });        regular_to_time.popover('show');        elem.val("");    } else {        closest_from_time = $(elem_tr).find(".from_time");        closest_to_time = $(elem_tr).find(".to_time");        closest_from_time.timepicker("destroy");        closest_to_time.timepicker("destroy");        closest_from_time.val("");        closest_to_time.val("");        if (elem.val() == "break" || elem.val() == "lunch") {            closest_from_time.timepicker({                minutes: {interval: 1},                showLeadingZero: false,                /* onSelect: tpStartSelect,                 minTime: {                 hour: regular_from_time.timepicker('getHour'),                 minute: regular_from_time.timepicker('getMinute')                 },                 maxTime: {                 hour: regular_to_time.timepicker('getHour'),                 minute: regular_to_time.timepicker('getMinute')                 }*/            });            closest_to_time.timepicker({                minutes: {interval: 1},                showLeadingZero: false,                /*  onSelect: tpEndSelect,                 minTime: {                 hour: regular_from_time.timepicker('getHour'),                 minute: regular_from_time.timepicker('getMinute')+1                 },                 maxTime: {                 hour: regular_to_time.timepicker('getHour'),                 minute: regular_to_time.timepicker('getMinute')                 }*/            });        } else if (elem.val() == "overtimestart") {            closest_from_time.timepicker({                minutes: {interval: 1},                showLeadingZero: false,                /* onSelect: tpStartSelect,                 minTime: {                 hour: regular_to_time.timepicker('getHour'),                 minute: regular_to_time.timepicker('getMinute')                 },*/            });            closest_to_time.timepicker({                minutes: {interval: 1},                showLeadingZero: false,                // onSelect: tpEndSelect,            });        }    }}$(".shift_table tbody tr:nth-child(1) input:text").live("change", function () {    if ($(this).val() != "") {        $(this).popover("destroy");    }});$(".shift_table tbody tr:gt(0) .from_time").live("click", function () {    near_select = $(this).closest("tr").find(".select_shift");    if (near_select.val() == "") {        near_select.popover({            trigger: 'manual',            placement: 'top',            title: 'Required',            content: 'Select a Type first'        });        near_select.popover('show');    }});$(document).ready(function () {    restrict_intime = new Array();    restrict_outtime = new Array();    $(".datepicker").datepicker({dateFormat: 'd-m-yy', onClose: function () {            var text = $.trim($(this).val());            var date_pattern = re = /^\d{1,2}-\d{1,2}-\d{4}$/;            if (text != "")            {                if (!text.match(date_pattern))                {                    alert("Invalid Date Format")                    $(this).val('');                }            }        }    });    $(".select_shift").each(function () {        this_index = $("select").index(this);        val = $(this).val();        if (val == "lunch" || val == "overtimestart") {            lock_options(val, this_index);        }    });    /*Time picker functionalities*/    /*$('.from_time').timepicker({     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },     onClose:function(){     regular_start =$(this).timepicker('getHour');     regular_s_min =$(this).timepicker('getMinute')+1;     if($(".to_time").hasClass("hasTimepicker")){     $(this).removeClass('hasTimepicker')     }     $(".to_time").timepicker({     minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes     hour: $(this).timepicker('getHour'),     minute: $(this).timepicker('getMinute')+1     // previous to min time     },     minutes: {     starts: 0,                // First displayed minute     ends: 59,                 // Last displayed minute     interval: 1,              // Interval of displayed minutes     manual: []                // Optional extra entries for minutes     },onClose:function(){     regular_end =$(this).timepicker('getHour');     regular_e_min=$(this).timepicker('getMinute')-1;     }     });     }     });	*/    /*Clone Tr element in add_shift page and store it in a global variable*/    if (ct_method == "add_shift" || ct_method == "edit_shift") {        tr_element = $(".to_clone");        //console.log(tr_element);        to_clone = tr_element.clone();        tr_element.find(".remove_row").css("visibility", "hidden");        tr_element.find(".select_shift_no_chng").attr("disabled", "disabled");        to_clone.removeClass("to_clone");        to_clone.find(".select_shift_no_chng").addClass("select_shift").removeClass("select_shift_no_chng");        to_clone.find(".select_shift option").each(function () {            if ($(this).attr("value") == "regular") {                $(this).remove();            }        });    }    if (ct_method == "edit_shift")    {        //$(".select_shift").trigger("change");    }    $(".add_row").click(function () {        var table = $(this).closest("table");        var len = $(table).find("tbody tr").length + 1;        if (ct_method == "add_shift" || ct_method == "edit_shift") {            //alert("enter")            table_body = $(".shift_table tbody");            temp = to_clone.clone();            temp.find(".select_shift option").each(function () {                if ($(this).val() == "lunch" && selected_obj["lunch"] == 1)                    $(this).attr("disabled", "disabled");                if ($(this).val() == "overtimestart" && selected_obj["overtimestart"] == 1)                    $(this).attr("disabled", "disabled");                $(temp).find("td.sno").text(len);                $(temp).find(".remove_row").css("visibility", "visible");            });            temp.find("input:text").each(function (i) {                $(this).val("");            });            new_elem = temp.appendTo(table_body);            //time_pick(temp);            //$(new_elem).find(".select_shift").trigger("change");        } else        {            var row = $(table).find("tbody tr:first").clone();            row.find("td:first").html(len);            row.find("input:text").each(function (i) {                if ($(this).css("border-color") == "red")                {                    $(this).css("border", "1px solid #BBBBBB");                }                $(this).removeAttr('id');                $(this).val('');                $(this).next("span").text('');            });            row.find("input:radio").each(function (i) {                var prev, next, get_name;                prev = $(this).attr('name');                next = prev.replace('0', len - 1);                $(this).attr('name', next);                if ($(this).is(':checked'))                {                    $(this).removeAttr('checked');                }            });            row.find("select").each(function (i) {                var prev, next, get_name;                prev = $(this).attr('name');                next = prev.replace('0', len - 1);                $(this).attr('name', next);                $(this).attr('id', "type" + Math.floor(Math.random() * 99) + 1);                $(this).attr('class', 'select_shift');                $(this).val('');                //$("#myselect").removeOption("regular");                //alert($(this).attr("readonly"));                $(this).removeAttr("disabled")            });            row.find("input:hidden").each(function (i) {                //console.log($(this));                //$(this).val('');            });            row.find("td:last").children("a").css("visibility", "visible");            table.find("tbody").append(row);            from_arr = new Array();            $('.from_time').each(function (i) {                if (i != 0)                {                    this.id = 'fromtime' + i;                    from_arr[i - 1] = this.id                }            });            for (k = 0; k < from_arr.length; k++)            {                $("#" + from_arr[k]).removeClass('hasTimepicker').timepicker({                    minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes                        hour: regular_start,                        minute: regular_s_min// previous to min time                    },                    maxTime: {                    // Set the minimum time selectable by the user, disable hours and minutes                        hour: regular_end, // after max time                        minute: regular_e_min                    },                    minutes: {                        starts: 0, // First displayed minute                        ends: 59, // Last displayed minute                        interval: 1, // Interval of displayed minutes                        manual: []                // Optional extra entries for minutes                    },                    beforeShow: function () {                        if ($(this).closest("tr").find("select").val() == "overtimestart")                        {                            check = $(this).attr("id");                        }                    },                    onClose: function ()                    {                        //alert(check);                        to_array = new Array();                        $('.to_time').each(function (i) {                            if (i != 0)                            {                                this.id = 'totime' + i;                                to_array[i - 1] = this.id;                            }                        });                        for (s = 0; s < to_array.length; s++)                        {                            yes = 0;                            if (check == 0)                            {                                yes = 1;                            }                            if ($(this).closest("tr").find(".from_time").attr("id") != check)                            {                                yes = 1;                            }                            if (yes == 1)                            {                                $("#" + to_array[s]).removeClass('hasTimepicker').timepicker({                                    minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes                                        hour: $(this).timepicker('getHour'),                                        minute: $(this).timepicker('getMinute') + 1// previous to min time                                    },                                    maxTime: {                    // Set the minimum time selectable by the user, disable hours and minutes                                        hour: regular_end, // after max time                                        minute: regular_e_min                                    },                                    minutes: {                                        starts: 0, // First displayed minute                                        ends: 59, // Last displayed minute                                        interval: 1, // Interval of displayed minutes                                        manual: []                // Optional extra entries for minutes                                    }                                    , onClose: function () {                                        restrict_outtime[0] = $(this).val();                                        //console.log(restrict_intime);                                        //console.log(restrict_outtime);                                    }                                });                            } else                            {                                $("#" + to_array[s]).removeClass('hasTimepicker').timepicker({                                    minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes                                        hour: $(this).timepicker('getHour'),                                        minute: $(this).timepicker('getMinute') + 1// previous to min time                                    },                                    minutes: {                                        starts: 0, // First displayed minute                                        ends: 59, // Last displayed minute                                        interval: 1, // Interval of displayed minutes                                        manual: []                // Optional extra entries for minutes                                    }                                    , onClose: function () {                                        restrict_outtime[0] = $(this).val();                                        //console.log(restrict_intime);                                        //console.log(restrict_outtime);                                    }                                });                            }                        }                    }                });            }            //	console.log(from_arr);            $('.datepicker').each(function (i) {                this.id = 'datepicker' + i;            }).removeClass('hasDatepicker').datepicker({dateFormat: 'd-m-yy', onClose: function () {                    var text = $.trim($(this).val());                    var date_pattern = re = /^\d{1,2}-\d{1,2}-\d{4}$/;                    if (text != "")                    {                        if (!text.match(date_pattern))                        {                            alert("Invalid Date Format")                            $(this).val('');                        }                    }                }});        }    });    /*$(".add_row").click(function(){     });*/    $(".submit").click(function () {        var table_td = $('.shift_table tbody tr:first');        table_td.find("select").removeAttr("disabled");        return true;    });    /*$(".shift_select").change(function(){     alert($(this).val());     });*///Call timepicker for first element after all calculations    if (ct_method == "add_shift") {        time_pick($(".shift_table").find("tbody tr:nth-child(1)"));    } else {        time_pick($(".shift_table").find("tbody tr"));    }});/* $(".remove_row").live('click', function () { $(this).closest("tr").remove(); tr = $("tbody").children("tr"); $(tr).each(function (i) { $(this).find("td.sno").text(i + 1); }); });*//*$(".from_time").live('focus',function(){ if(check!=0) { if($(this).attr("id")==check) { if($(this).hasClass("hasTimepicker")) { //$(this).closest("tr").find("to_time").removeClass('hasTimepicker'); $(this).removeClass('hasTimepicker').timepicker({ minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes hour: regular_end ,         // after max time minute: regular_e_min+2 }, minutes: { starts: 0,                // First displayed minute ends: 59,                 // Last displayed minute interval: 1,              // Interval of displayed minutes manual: []                // Optional extra entries for minutes } }); } } } });*/$(".select_shift").live('change', function () {    this_index = $("select").index(this);    val = $(this).val();    if (this_index == selected_obj["lunch_index"] && val != "lunch") {        release_options("lunch", this_index);    } else if (this_index == selected_obj["overtimestart_index"] && val != "overtimestart") {        release_options("overtimestart", this_index);    }    if (val == "lunch" || val == "overtimestart") {        lock_options(val, this_index);    }    //Call to manage options function to change min and max time for each option    manageOptions($(this));});function lock_options(time, index) {    if (time == "lunch" || time == "overtimestart") {        if (selected_obj[time] == 1 && selected_obj[time + '_index'] != index) {            selected_obj[time + '_index'] = index;        } else if (selected_obj[time] != 1) {            selected_obj[time] = 1;            selected_obj[time + '_index'] = index;        } else {            selected_obj[time] = 0;            selected_obj[time + '_index'] = null;        }        $(".select_shift").each(function () {            ct_index = $("select").index(this);            $(this).find("option").each(function () {                if ($(this).val() == time && selected_obj[time] == 1 && ct_index != selected_obj[time + '_index'])                    $(this).attr("disabled", "disabled");            });        });    }}function release_options(time, index) {    $(".select_shift").each(function () {        $(this).find("option").each(function () {            if ($(this).val() == time && selected_obj[time] == 1)                $(this).removeAttr("disabled");        });    });    selected_obj[time] = 0;    selected_obj[time + '_index'] = null;}/*$(".from_time").live('blur',function(){ if(check!=0) { if($(this).attr("id")==check) { alert("emyt"); time_set = $(this).closest("tr").find(".from_time").val().split(':'); to_id = "#"+$(this).attr("id"); //alert(to_id); $(to_id).timepicker({ minTime: {                    // Set the minimum time selectable by the user, disable hours and minutes hour: time_set[0], minute: parseInt(time_set[1])+1 }, minutes: { starts: 0,                // First displayed minute ends: 59,                 // Last displayed minute interval: 1,              // Interval of displayed minutes manual: []                // Optional extra entries for minutes }}); } } });*///$(".from_time")	.timepicker({controlType: 'select'});//$(".to_time").timepicker({controlType: 'select'});
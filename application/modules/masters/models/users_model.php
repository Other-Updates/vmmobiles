<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');/** * Users_model * * This model represents Users. It operates the following tables: * - users, * * @package	Payroll * @author	Vathsala */class Users_model extends CI_Model {    private $table_name = 'users';    private $length;    function __construct() {        parent::__construct();        $ci = & get_instance();        $this->load->model('masters/increment_model');        $last_inc_id = $this->increment_model->get_increment_id('employee');        $last_inc_id = explode("-", $last_inc_id[0]["last_increment_id"]);        $this->length = strlen($last_inc_id[0]);        //$this->length = $this->options_model->get_length_of_employee_id_prefix();    }    /**     * Get all users     *     * @return	array     */    function get_all_users($status = null) {        $this->db->order_by('id', 'asc');        //if($status!=null)        $this->db->where($this->table_name . '.status', $status);        //else        //$this->db->where($this->table_name.'.status',1);        $query = $this->db->get($this->table_name);        $this->check_moved();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* get user first name and last name by user id */    function get_user_name_by_user_id($user_id) {        $this->db->select('first_name,last_name');        if (gettype($user_id) == "array") {            $this->db->where_in($this->table_name . '.id', $user_id);        } else {            $this->db->where($this->table_name . '.id', $user_id);        }        $query = $this->db->get($this->table_name);        if ($query->num_rows() == 1) {            return $query->result_array();        }        return false;    }    /**     * Get all users by limit     *     * @return	array     */    function get_all_users_by_limit($limit, $start) {        $this->db->limit($limit, $start);        $this->db->order_by('id', 'asc');        $this->db->where($this->table_name . '.status', 1);        $this->check_moved();        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /**     * Get users by id (user id)     *     * @param	int     * @return	array     */    function get_user_by_id($user_id) {        // $user_id = 1;        $this->db->where('id', $user_id);        //$this->db->where($this->table_name.'.status',1);        $this->check_moved();        $query = $this->db->get($this->table_name);        if ($query->num_rows() == 1) {            return $query->result_array();        }        return false;    }    /**     * Get users status by id (user id)     *     * @param	int     * @return	array     */    function get_user_status_by_user_id($user_id) {        $this->db->select('status');        $this->db->where('id', $user_id);        //$this->db->where($this->table_name.'.status',1);        $this->check_moved();        $query = $this->db->get($this->table_name);        if ($query->num_rows() == 1) {            return $query->result_array();        }        return false;    }    /**     * Insert new user     *     * @param	array     * @param	bool     * @return	id     */    function insert_user($data) {        $data["password"] = md5($data["password"]);        if ($this->db->insert($this->table_name, $data)) {            $user_id = $this->db->insert_id();            return $user_id;        }        return false;    }    /**     * Insert new user     *     * @param	array     * @param	bool     * @return	id     */    function insert_user_details($data) {        if ($this->db->insert($this->table_name, $data)) {            $user_id = $this->db->insert_id();            return $user_id;        }        return false;    }    /**     * Update a user     *     * @param	array     * @param	int     * @return	bool     */    function update_user($user_id, $data) {        if ($data["password"] == "") {            unset($data["password"]);        } else {            //$key = 'z5icYObv4WBUMAx78dhlvh1sRV1EAv0T';            $data["password"] = md5($data["password"]);        }        $this->db->where('id', $user_id);        if ($this->db->update($this->table_name, $data)) {            return true;        }        return false;    }    /* Update user status by user id */    function update_user_status($user_id, $status) {        $this->db->set('status', $status);        $this->db->where('id', $user_id);        if ($this->db->update($this->table_name)) {            return true;        }        return false;    }    /* Update user move status by user id */    function update_moved_status_by_user_id($user_id, $moved) {        $this->db->set('moved', $moved);        $this->db->where('id', $user_id);        if ($this->db->update($this->table_name)) {            return true;        }        return false;    }    /**     * Delete a user     *     * @param	int     * @return	bool     */    function delete_user($user_id) {        $this->db->where('id', $user_id);        $this->db->delete($this->table_name);        if ($this->db->affected_rows() > 0) {            return true;        }        return false;    }    /**     * Get users count */    function get_users_count($status = null, $moved = null) {        $this->db->select('count(*) as count');        $this->check_moved();        if (isset($moved))            $this->db->where($this->table_name . '.moved', $moved);        $this->db->where($this->table_name . '.status', $status);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_last_employee_id() {        $query = $this->db->query('SELECT employee_id FROM (`users`) ORDER BY id desc LIMIT 1');        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_users_with_dept_by_limit($limit, $start, $filter = null, $status = null, $moved = null) {        $s = 0;        $this->db->limit($limit, $start);        $this->db->select($this->table_name . '.id,employee_id,first_name,last_name,email,mobile,username,moved');        $this->db->select($this->table_name . '.status');        $this->db->select('department.id as dept');        $this->db->select('department.name as dept_name');        $this->db->select('designation.name as des_name');        $this->db->select('substr(`employee_id`, ' . $this->length . ') as emp_id', false);        //$this->pre_print->viewExit($filter);        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["sort"]) && !empty($filter["sort"])) {                if ($filter["sort"] == "dept_name")                    $this->db->order_by("department.name", $filter["order"]);                elseif ($filter["sort"] == "des_name")                    $this->db->order_by("designation.name", $filter["order"]);                else {                    $filter["sort"] = ($filter["sort"] != "emp_id") ? $this->table_name . '.' . $filter["sort"] : "LENGTH(emp_id)" . $filter["order"] . ",emp_id";                    $this->db->order_by($filter["sort"], $filter["order"]);                }            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }            if (isset($filter["inactive"])) {                if ($filter["inactive"] == 0) {                    $s = 0;                    $status = 1;                } else if ($filter["inactive"] == 1) {                    $s = 1;                    $status = 0;                } else if ($filter["inactive"] == 2) {                    $s = 2;                    $status = array(0, 1);                }            }        }        if (!isset($filter["sort"]) && empty($filter["sort"])) {            $this->db->order_by($this->table_name . '.id', 'asc');        }        if ($s == 0)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 1)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 2)            $this->db->where_in($this->table_name . '.status', $status);        if (isset($moved))            $this->db->where($this->table_name . '.moved', $moved);        $this->check_moved();        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $this->db->limit(100);        $query = $this->db->get($this->table_name);        //echo $this->db->last_query();        //exit;        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_users_with_dept($filter = null, $status = null, $moved = null) {        $s = 0;        $this->db->select($this->table_name . '.id,employee_id,first_name,last_name,email,mobile,username,moved');        $this->db->select($this->table_name . '.status');        $this->db->select('department.id as dept');        $this->db->select('department.name as dept_name');        $this->db->select('designation.name as des_name');        $this->db->select('substr(`employee_id`,  ' . $this->length . ') as emp_id', false);        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["sort"]) && !empty($filter["sort"])) {                if ($filter["sort"] == "dept_name")                    $this->db->order_by("department.name", $filter["order"]);                elseif ($filter["sort"] == "des_name")                    $this->db->order_by("designation.name", $filter["order"]);                else {                    $filter["sort"] = ($filter["sort"] != "emp_id") ? $this->table_name . '.' . $filter["sort"] : "LENGTH(emp_id)";                    $this->db->order_by($filter["sort"], $filter["order"]);                }            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }            if (isset($filter["inactive"])) {                if ($filter["inactive"] == 0) {                    $s = 0;                    $status = 1;                } else if ($filter["inactive"] == 1) {                    $s = 1;                    $status = 0;                } else if ($filter["inactive"] == 2) {                    $s = 2;                    $status = array(0, 1);                }            }        }        if (!isset($filter["sort"]) && empty($filter["sort"])) {            $this->db->order_by($this->table_name . '.id', 'asc');        }        if ($s == 0)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 1)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 2)            $this->db->where_in($this->table_name . '.status', $status);        if (isset($moved))            $this->db->where($this->table_name . '.moved', $moved);        $this->check_moved();        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $query = $this->db->get($this->table_name);        //echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_filter_user_count($filter = null, $status = null, $moved = null) {        //print_r($filter);        $this->db->select('substr(`employee_id`,  ' . $this->length . ') as emp_id', false);        $this->db->select('count(' . $this->table_name . '.id) as count');        $s = 0;        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["users"]) && !empty($filter["users"])) {                $this->db->where_in($this->table_name . '.id', $filter["users"]);            }            if (isset($filter["sort"]) && !empty($filter["sort"])) {                if ($filter["sort"] != "available_casual_leave" && $filter["sort"] != "available_sick_leave" && $filter["sort"] != "permission" && $filter["sort"] != "comp_off" && $filter["sort"] != "available_earned_leave") {                    if ($filter["sort"] == "dept_name")                        $this->db->order_by("department.name", $filter["order"]);                    elseif ($filter["sort"] == "des_name")                        $this->db->order_by("designation.name", $filter["order"]);                    else {                        $filter["sort"] = ($filter["sort"] != "emp_id") ? $this->table_name . '.' . $filter["sort"] : "LENGTH(emp_id)";                        $this->db->order_by($filter["sort"], $filter["order"]);                    }                }            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }            if (isset($filter["inactive"])) {                if ($filter["inactive"] == 0) {                    $s = 0;                    $status = 1;                } else if ($filter["inactive"] == 1) {                    $s = 1;                    $status = 0;                } else if ($filter["inactive"] == 2) {                    $s = 2;                    $status = array(0, 1);                }            }        }        if (!isset($filter["sort"]) && empty($filter["sort"])) {            $this->db->order_by($this->table_name . '.id', 'asc');        }        if ($s == 0)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 1)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 2)            $this->db->where_in($this->table_name . '.status', $status);        if (isset($moved))            $this->db->where($this->table_name . '.moved', $moved);        $this->check_moved();        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_users_with_filter($filter, $status = null) {        $this->db->select($this->table_name . '.id,employee_id,first_name,email');        $this->db->select('department.name as dept_name');        $this->db->select('designation.name as des_name');        //if($status!=null)        $this->db->where($this->table_name . '.status', $status);        //else        //$this->db->where($this->table_name.'.status',1);        $this->check_moved();        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        if (isset($filter["department"]) && !empty($filter["department"])) {            $this->db->where_in('user_department.department', $filter["department"]);        }        if (isset($filter["designation"]) && !empty($filter["designation"])) {            $this->db->where_in('user_department.designation', $filter["designation"]);        }        if (isset($filter['field']) && $filter['field'] != NULL) {            if ($filter['field'] == "gender")                $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";            else                $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';            $this->db->where($where);        }        $this->db->order_by($this->table_name . '.id', 'asc');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    //get firstname,lastname and dob of the user by user id    function get_user_name_by_id($user_id) {        $this->db->select('first_name,last_name,dob');        $this->db->where('id', $user_id);        $this->check_moved();        $query = $this->db->get($this->table_name);        if ($query->num_rows() == 1) {            return $query->result_array();        }        return false;    }    function get_user_dept_des_by_user_id($user_id) {        $this->db->select($this->table_name . '.id,first_name,username,last_name');        $this->db->select('department.id as dept');        $this->db->select('department.name as dept_name');        $this->db->select('designation.id as des');        $this->db->select('designation.name as des_name');        $this->db->where($this->table_name . '.id', $user_id);        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    //get available users leaves    function get_users_leaves_with_dept_by_limit($limit, $start, $filter, $status) {        $s = 0;        $this->db->limit($limit, $start);        $this->db->select($this->table_name . '.id as user_id,employee_id,username,first_name,last_name,email');        $this->db->select('substr(`employee_id`,  ' . $this->length . ') as emp_id', false);        $this->db->select($this->table_name . '.status');        $this->db->select('department.id as dept');        //$this->db->select('department.shift_id as shift');        //$this->db->select('department.ot_applicable');        $this->db->select('department.name as dept_name');        $this->db->select('available_leaves.available_casual_leave,available_sick_leave,permission,comp_off,available_earned_leave');        $this->db->select('designation.name as des_name');        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["users"]) && !empty($filter["users"])) {                $this->db->where_in($this->table_name . '.id', $filter['users']);            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }            if (isset($filter["sort"]) && !empty($filter["sort"])) {                if ($filter["sort"] == "dept_name")                    $this->db->order_by("department.name", $filter["order"]);                elseif ($filter["sort"] == "des_name")                    $this->db->order_by("designation.name", $filter["order"]);                elseif ($filter["sort"] == "available_casual_leave" || $filter["sort"] == "available_sick_leave" || $filter["sort"] == "permission" || $filter["sort"] == "comp_off" || $filter["sort"] == "available_earned_leave") {                    $this->db->order_by("available_leaves." . $filter["sort"], $filter["order"]);                } else {                    $filter["sort"] = ($filter["sort"] != "emp_id") ? $this->table_name . '.' . $filter["sort"] : "LENGTH(emp_id)";                    $this->db->order_by($filter["sort"], $filter["order"]);                }            }            if (isset($filter["inactive"])) {                if ($filter["inactive"] == 0) {                    $s = 0;                    $status = 1;                } else if ($filter["inactive"] == 1) {                    $s = 1;                    $status = 0;                } else if ($filter["inactive"] == 2) {                    $s = 2;                    $status = array(0, 1);                }            }        }        if ($s == 0)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 1)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 2)            $this->db->where_in($this->table_name . '.status', $status);        $this->check_moved();        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $this->db->join('available_leaves', 'available_leaves.user_id=' . $this->table_name . '.id', 'left');        if (!isset($filter["sort"]) && empty($filter["sort"])) {            $this->db->order_by($this->table_name . '.id', 'asc');        }        $query = $this->db->get($this->table_name);        //	echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    //get available users leaves    function get_users_leaves_with_dept_without_limit($filter, $status) {        $s = 0;        $this->db->select($this->table_name . '.id as user_id,employee_id,username,first_name,last_name,email');        $this->db->select('substr(`employee_id`,  ' . $this->length . ') as emp_id', false);        $this->db->select($this->table_name . '.status');        $this->db->select('department.id as dept');        //$this->db->select('department.shift_id as shift');        //$this->db->select('department.ot_applicable');        $this->db->select('department.name as dept_name');        $this->db->select('available_leaves.available_casual_leave,available_sick_leave,permission,comp_off,available_earned_leave');        $this->db->select('designation.name as des_name');        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["users"]) && !empty($filter["users"])) {                $this->db->where_in($this->table_name . '.id', $filter['users']);            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }            if (isset($filter["sort"]) && !empty($filter["sort"])) {                if ($filter["sort"] == "dept_name")                    $this->db->order_by("department.name", $filter["order"]);                elseif ($filter["sort"] == "des_name")                    $this->db->order_by("designation.name", $filter["order"]);                elseif ($filter["sort"] == "available_casual_leave" || $filter["sort"] == "available_sick_leave" || $filter["sort"] == "permission" || $filter["sort"] == "comp_off" || $filter["sort"] == "available_earned_leave") {                    $this->db->order_by("available_leaves." . $filter["sort"], $filter["order"]);                } else {                    $filter["sort"] = ($filter["sort"] != "emp_id") ? $this->table_name . '.' . $filter["sort"] : "LENGTH(emp_id)";                    $this->db->order_by($filter["sort"], $filter["order"]);                }            }            if (isset($filter["inactive"])) {                if ($filter["inactive"] == 0) {                    $s = 0;                    $status = 1;                } else if ($filter["inactive"] == 1) {                    $s = 1;                    $status = 0;                } else if ($filter["inactive"] == 2) {                    $s = 2;                    $status = array(0, 1);                }            }        }        if ($s == 0)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 1)            $this->db->where($this->table_name . '.status', $status);        else if ($s == 2)            $this->db->where_in($this->table_name . '.status', $status);        $this->check_moved();        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $this->db->join('available_leaves', 'available_leaves.user_id=' . $this->table_name . '.id', 'left');        if (!isset($filter["sort"]) && empty($filter["sort"])) {            $this->db->order_by($this->table_name . '.id', 'asc');        }        $query = $this->db->get($this->table_name);        //	echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* get user details for nominee form */    function get_user_details_by_id($user_id) {        $this->db->select('first_name,last_name,gender,marital_status,religion,address.*');        $this->db->where($this->table_name . '.id', $user_id);        $this->db->where('address.type', 'permanent');        $this->db->join('address', 'address.user_id=' . $this->table_name . '.id', 'left');        $query = $this->db->get($this->table_name);        //echo $this->db->last_query();        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    public function check_moved() {        /* if($this->config->item("esipf") == 1) {          $this->db->where($this->table_name.'.moved',1);          } */    }    function get_all_users_username_except($user_id) {        $this->db->select('username');        if ($user_id != null) {            $this->db->where('id !=', $user_id);        }        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_all_access_id_except($user_id = null) {        $this->db->select('access_id');        if ($user_id != null) {            $this->db->where('id !=', $user_id);        }        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function get_user_profile_image_by_user_id($user_id) {        $this->db->select('image');        $this->db->where('id', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() == 1) {            return $query->result_array();        }        return false;    }    function get_users_count_with_shift_salary($filter = null, $status = null, $moved = null, $day_value, $day_value2, $dept_id = null) {        $s = 0;        $enter = 0;        if (isset($filter["inactive"])) {            $s = 1;        }        //$this->pre_print->viewExit($filter);        if (($this->router->class == "tds" && $this->router->method == "index") || ($this->router->class == "reports" && $this->router->method == "tds_reports")) {            $sql = "SELECT * FROM tds_view ";            $view = "tds_view";        } else {            $sql = "SELECT * FROM users_view ";            $view = "users_view";        }        if ($this->router->method == "daily_attendance") {            $sql .=" INNER JOIN user_history on user_history.user_id= " . $view . ".id";        }        //echo $sql;        //if($s==0)        //$sql .="  WHERE users.status =".$status;        if (isset($filter["start_date"])) {            $sql.= " WHERE (" . $view . ".dol >='" . $filter['start_date'] . "'";            $sql.= " OR " . $view . ".dol IS NULL) ";        }        if (isset($dept_id) && !empty($dept_id)) {            $dept_id = implode(",", $dept_id);            $sql .="  AND dept IN(" . $dept_id . ")";        }        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $department = "(";                for ($i = 0; $i < count($filter["department"]); $i++) {                    if ($filter["department"][$i] != "multiselect-all") {                        $department .= $filter["department"][$i];                        if ($i < count($filter["department"]) - 1)                            $department .=",";                    }                }                $department .=")";                //$this->db->where_in('department.id',$filter['department']);                $sql .=" AND dept IN " . $department;            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $designation = "(";                for ($i = 0; $i < count($filter["designation"]); $i++) {                    if ($filter["designation"][$i] != "multiselect-all") {                        $designation .= $filter["designation"][$i];                        if ($i < count($filter["designation"]) - 1)                            $designation .=",";                    }                }                $designation .=")";                $sql .=" AND des IN " . $designation;            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $sql .=" AND " . $where . " ";            }            if ($this->router->method == "daily_attendance") {                $sql .= " AND user_history.date<='" . date('Y-m-d') . "'";                $sql .= " AND user_history.type='doj'";                $sql .= " HAVING salary_type !='' ";                $enter = 1;            } else if (($this->router->class == "tds" && $this->router->method == "index") || ($this->router->class == "reports" && $this->router->method == "tds_reports")) {                $sql .= " HAVING salary_type ='monthly' ";                $enter = 1;            } else if ($this->router->method != "wage_process_reports") {                if (isset($filter["user_type"])) {                    $type = "";                    if ($filter["user_type"] == 1)                        $sql .= " HAVING (salary_type = 'weekly' OR salary_type='daily')";                    else                        $sql .= " HAVING salary_type = 'monthly' ";                    $enter = 1;                }            }            else if (isset($filter)) {                $sql .= " HAVING salary_type !='' ";                $enter = 1;            }            if (isset($filter["shift"]) && !empty($filter["shift"])) {                if ($enter == 0) {                    $sql .= "HAVING";                    $enter = 2;                }                $shift = "(";                for ($i = 0; $i < count($filter["shift"]); $i++) {                    if ($filter["shift"][$i] != "multiselect-all") {                        $shift .= $filter["shift"][$i];                        if ($i < count($filter["shift"]) - 1)                            $shift .=",";                    }                }                $shift .=")";                $sql .=" AND shift IN " . $shift;            }            if (isset($filter["salary_group"]) && !empty($filter["salary_group"])) {                if ($enter == 0) {                    $sql .= "HAVING";                    $enter = 2;                }                $salary_group = "(";                for ($i = 0; $i < count($filter["salary_group"]); $i++) {                    if ($filter["salary_group"][$i] != "multiselect-all") {                        $salary_group .= $filter["salary_group"][$i];                        if ($i < count($filter["salary_group"]) - 1)                            $salary_group .=",";                    }                }                $salary_group .=")";                $sql .=" AND salary_group IN " . $salary_group;            }        }        if (is_null($filter)):            //echo $this->router->method;            //exit;            if ($this->router->method != "salary_process_reports") {                $sql .= " HAVING salary_type = 'monthly'";                $enter = 2;            } else {                $sql .= " HAVING salary_type !='' ";                $enter = 2;            }        endif;        if ($enter == 0) {            $sql .= "HAVING salary_type !='' ";        }        if (!isset($filter["shift"]) && empty($filter["shift"]) && !isset($filter["salary_group"]) && empty($filter["salary_group"]))            $sql .= " AND (shift!='' AND salary_group!='')";        if (!isset($filter["shift"]) && empty($filter["shift"]) && isset($filter["salary_group"]) && !empty($filter["salary_group"]))            $sql .=" AND salary_group!=''";        if (isset($filter["shift"]) && !empty($filter["shift"]) && !isset($filter["salary_group"]) && empty($filter["salary_group"]))            $sql .=" AND shift!=''";        //$sql .=" AND ISNULL(salary_process)";        if (isset($filter["sort"]) && !empty($filter["sort"])) {            if ($filter["sort"] == "dept_name")                $sql .= " ORDER BY " . $view . ".dept_name " . $filter["order"];            //$this->db->order_by("department.name", $filter["order"]);            elseif ($filter["sort"] == "des_name")                $sql .= " ORDER BY " . $view . ".des_name " . $filter["order"];            //$this->db->order_by("designation.name", $filter["order"]);            else {                //$filter["sort"] = ($filter["sort"] != "emp_id") ? $view.'.'.$filter["sort"] : "LENGTH(emp_id)";                //$this->db->order_by($filter["sort"], $filter["order"]);                if ($filter["sort"] == "emp_id")                    $sql .=" ORDER BY LEFT(emp_id,LOCATE('-',emp_id)), CAST(SUBSTRING(emp_id,LOCATE('-',emp_id)+1) AS SIGNED) " . $filter["order"];                else                    $sql .=" ORDER BY " . $filter["sort"] . " " . $filter["order"];            }        }        if (!isset($filter["sort"]) && empty($filter["sort"])) {            //$this->db->order_by($this->table_name.'.id','asc');            $sql .=" ORDER BY " . $view . ".id asc";        }        $this->db->limit(100);        $query = $this->db->query($sql);        //echo $this->db->last_query();        // echo "<pre>";        //print_r($query->result_array());        //exit;        if ($query->num_rows() >= 1) {            //echo $sql;            //exit;            return $query->result_array();        }        return false;    }    function get_users_with_shift_salary($filter = null, $status = null, $moved = null, $day_value, $day_value2, $limit, $start, $dept_id = null) {        $s = 0;        $enter = 0;        if (isset($filter["inactive"])) {            $s = 1;        }        if (($this->router->class == "tds" && $this->router->method == "index") || ($this->router->class == "reports" && $this->router->method == "tds_reports")) {            $sql = "SELECT * FROM tds_view ";            $view = "tds_view";        } else {            $sql = "SELECT * FROM users_view ";            $view = "users_view";        }        if ($this->router->method == "daily_attendance") {            $sql .=" INNER JOIN user_history on user_history.user_id= " . $view . ".id";        }        //if($s==0)        //$sql .="  WHERE users_view.status =".$status;        if (isset($filter["start_date"])) {            $sql.= " WHERE (" . $view . ".dol >='" . $filter['start_date'] . "'";            $sql.= " OR " . $view . ".dol IS NULL) ";        }        if (isset($dept_id) && !empty($dept_id)) {            $dept_id = implode(",", $dept_id);            $sql .=" AND dept IN(" . $dept_id . ")";        }        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $department = "(";                for ($i = 0; $i < count($filter["department"]); $i++) {                    if ($filter["department"][$i] != "multiselect-all") {                        $department .= $filter["department"][$i];                        if ($i < count($filter["department"]) - 1)                            $department .=",";                    }                }                $department .=")";                $sql .=" AND dept IN " . $department;            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $designation = "(";                for ($i = 0; $i < count($filter["designation"]); $i++) {                    if ($filter["designation"][$i] != "multiselect-all") {                        $designation .= $filter["designation"][$i];                        if ($i < count($filter["designation"]) - 1)                            $designation .=",";                    }                }                $designation .=")";                $sql .=" AND des IN " . $designation;            }            if (isset($filter['field']) && $filter['field'] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $sql .=" AND  " . $where . " ";            }            if ($this->router->method == "daily_attendance") {                $sql .= " AND user_history.date<='" . date('Y-m-d') . "'";                $sql .= " AND user_history.type='doj'";                $sql .= " HAVING salary_type !='' ";                $enter = 1;            } else if (($this->router->class == "tds" && $this->router->method == "index") || ($this->router->class == "reports" && $this->router->method == "tds_reports")) {                $sql .= " HAVING salary_type ='monthly' ";                $enter = 1;            } else if ($this->router->method != "wage_process_reports") {   //echo $this->router->method;                if (isset($filter["user_type"])) {                    $type = "";                    if ($filter["user_type"] == 1)                        $sql .= " HAVING (salary_type = 'weekly' OR salary_type='daily')";                    else                        $sql .= " HAVING salary_type = 'monthly' ";                    $enter = 1;                }            }            else if (isset($filter)) {                $sql .= " HAVING salary_type !='' ";                $enter = 1;            }            if ($enter == 0) {                $sql .= "HAVING";                $enter = 2;            }            if (isset($filter["shift"]) && !empty($filter["shift"])) {                $shift = "(";                for ($i = 0; $i < count($filter["shift"]); $i++) {                    if ($filter["shift"][$i] != "multiselect-all") {                        $shift .= $filter["shift"][$i];                        if ($i < count($filter["shift"]) - 1)                            $shift .=",";                    }                }                $shift .=")";                $sql .=" AND shift IN " . $shift;            }            if (isset($filter["salary_group"]) && !empty($filter["salary_group"])) {                $salary_group = "(";                for ($i = 0; $i < count($filter["salary_group"]); $i++) {                    if ($filter["salary_group"][$i] != "multiselect-all") {                        $salary_group .= $filter["salary_group"][$i];                        if ($i < count($filter["salary_group"]) - 1)                            $salary_group .=",";                    }                }                $salary_group .=")";                $sql .=" AND salary_group IN " . $salary_group;            }        }        if ($filter == ""):            if ($this->router->method != "salary_process_reports") {                $sql .= " HAVING salary_type = 'monthly'";                $enter = 2;            } else {                $sql .= " HAVING salary_type !='' ";                $enter = 2;            }        endif;        if ($enter == 0) {            $sql .= "HAVING";        }        if (!isset($filter["shift"]) && empty($filter["shift"]) && !isset($filter["salary_group"]) && empty($filter["salary_group"]))            $sql .= " AND  shift!='' AND salary_group!='' ";        if (!isset($filter["shift"]) && empty($filter["shift"]) && isset($filter["salary_group"]) && !empty($filter["salary_group"]))            $sql .=" AND salary_group!=''";        if (isset($filter["shift"]) && !empty($filter["shift"]) && !isset($filter["salary_group"]) && empty($filter["salary_group"]))            $sql .=" AND shift!=''";        //$sql .=" AND ISNULL(salary_process)";        if (isset($filter["sort"]) && !empty($filter["sort"])) {            if ($filter["sort"] == "dept_name")                $sql .= " ORDER BY " . $view . ".dept_name " . $filter["order"];            //$this->db->order_by("department.name", $filter["order"]);            elseif ($filter["sort"] == "des_name")                $sql .= " ORDER BY " . $view . ".des_name " . $filter["order"];            //$this->db->order_by("designation.name", $filter["order"]);            else {                if ($filter["sort"] == "emp_id")                    $sql .=" ORDER BY LEFT(emp_id,LOCATE('-',emp_id)), CAST(SUBSTRING(emp_id,LOCATE('-',emp_id)+1) AS SIGNED) " . $filter["order"];                else                    $sql .=" ORDER BY " . $filter["sort"] . " " . $filter["order"];                //$filter["sort"] = ($filter["sort"] != "emp_id") ? $view.'.'.$filter["sort"] : "LENGTH(emp_id)";                //$this->db->order_by($filter["sort"], $filter["order"]);            }        }        if (!isset($filter["sort"]) && empty($filter["sort"])) {            //$this->db->order_by($this->table_name.'.id','asc');            $sql .=" ORDER BY " . $view . ".id asc";        }        //$sql .=" LIMIT " . $start . "," . $limit;        $query = $this->db->query($sql);        //echo $this->db->last_query();        if ($query->num_rows() >= 1) {            // echo "<pre>";print_r($query->result_array());            return $query->result_array();        }        return false;    }    function create_view_for_normal_users($day_value) {        $sql = "CREATE OR REPLACE VIEW users_view AS ";        $sql .= "SELECT users.id,employee_id,username,first_name,last_name,email,department.id as dept,department.name as dept_name,designation.id as des,designation.name as des_name, substr(`employee_id`,  '3') as emp_id,user_history.date as dol,";        $sql .=" (SELECT `user_salary`.type from user_salary WHERE DATE(revised_date) <= '" . $day_value . "' AND users.id=user_salary.user_id ORDER BY `revised_date` desc LIMIT 1) as salary_type,			(SELECT `user_shift`.shift_id from user_shift WHERE  DATE(created) <= '" . $day_value . "' AND users.id=user_shift.user_id  ORDER BY `created` desc LIMIT 1) as shift,			(SELECT `user_salary`.salary_group from user_salary WHERE DATE(revised_date) <= '" . $day_value . "' AND users.id=user_salary.user_id ORDER BY `revised_date` desc LIMIT 1) as salary_group";        $sql .= " FROM users			LEFT JOIN user_department on user_department.user_id = users.id			LEFT JOIN department on department.id= user_department.department			LEFT JOIN designation on designation.id= user_department.designation			LEFT JOIN user_history on user_history.user_id= users.id AND user_history.type='dol'";        $query = $this->db->query($sql);        //echo $this->db->last_query();    }    function create_view_for_tds($day_value) {        $sql = "CREATE OR REPLACE VIEW tds_view AS ";        $sql .= "SELECT users.id,employee_id,username,first_name,last_name,email,department.id as dept,department.name as dept_name,designation.id as des,designation.name as des_name, substr(`employee_id`,  '3') as emp_id,user_history.date as dol,";        $sql .=" (SELECT `user_salary`.type from user_salary WHERE YEAR(revised_date) <= '" . date('Y', strtotime($day_value)) . "' AND users.id=user_salary.user_id ORDER BY `revised_date` desc , id desc LIMIT 1) as salary_type,				(SELECT `user_shift`.shift_id from user_shift WHERE  YEAR(created) <= '" . date('Y', strtotime($day_value)) . "' AND users.id=user_shift.user_id  ORDER BY `created` desc , id desc LIMIT 1) as shift,				(SELECT `user_salary`.salary_group from user_salary WHERE YEAR(revised_date) <= '" . date('Y', strtotime($day_value)) . "' AND users.id=user_salary.user_id ORDER BY `revised_date` desc LIMIT 1) as salary_group";        $sql .= " FROM users		LEFT JOIN user_department on user_department.user_id = users.id		LEFT JOIN department on department.id= user_department.department		LEFT JOIN designation on designation.id= user_department.designation		LEFT JOIN user_history on user_history.user_id= users.id AND user_history.type='dol'";        $query = $this->db->query($sql);        //echo $this->db->last_query();    }    function check_user_name_exist($username, $user_id = NULL) {        $this->db->select('username');        $this->db->where('LOWER(username)', trim(strtolower($username)));        if (isset($user_id) && $user_id != NULL)            $this->db->where('id !=', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    function check_access_id_exist($access_id, $user_id = NULL) {        $this->db->select('access_id');        $this->db->where('LOWER(access_id)', trim(strtolower($access_id)));        if (isset($user_id) && $user_id != NULL)            $this->db->where('id !=', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get all users date of birth for admin */    function get_all_users_date_of_birth($status) {        $this->db->select('dob,first_name,username,id,last_name,image');        $this->db->where('status', $status);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get all users date of birth for user */    function get_all_users_date_of_birth_unique($status, $users_id_list) {        $this->db->select('dob,first_name,username,id,last_name,image');        $this->db->where_in('id', $users_id_list);        $this->db->where('status', $status);        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get number of users */    function get_number_of_users($status, $doj) {        $this->db->select('count(*) as count');        $this->db->where('status', $status);        $this->db->where('user_history.date <=', $doj);        $this->db->where('user_history.type =', "doj");        $this->db->join('user_history', 'user_history.user_id=' . $this->table_name . '.id', 'left');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get number of users by filter */    function get_number_of_users_by_filter($filter, $status, $doj) {        $this->db->select('count(*) as count');        if (isset($filter) && !empty($filter)) {            if (isset($filter["department"]) && !empty($filter["department"])) {                $this->db->where_in('department.id', $filter['department']);            }            if (isset($filter["designation"]) && !empty($filter["designation"])) {                $this->db->where_in('designation.id', $filter['designation']);            }            if (isset($filter["users"]) && !empty($filter["users"])) {                $this->db->where_in($this->table_name . '.id', $filter["users"]);            }            if (isset($filter['field']) && $filter['field'] != NULL && isset($filter["value"]) && $filter["value"] != NULL) {                if ($filter['field'] == "gender")                    $where = $this->table_name . '.' . $filter['field'] . " = '" . $filter["value"] . "'";                else                    $where = $this->table_name . '.' . $filter['field'] . ' LIKE "%' . $filter["value"] . '%"';                $this->db->where($where);            }        }        $this->db->where('' . $this->table_name . '.status', $status);        $this->db->where('user_history.date <=', $doj);        $this->db->where('user_history.type =', "doj");        $this->db->join('user_history', 'user_history.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('user_department', 'user_department.user_id=' . $this->table_name . '.id', 'left');        $this->db->join('department', 'department.id=user_department.department', 'left');        $this->db->join('designation', 'designation.id=user_department.designation', 'left');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    /* Get user profile details */    function get_user_profile_details($user_id) {        $this->db->select('id,employee_id,username,password,first_name,last_name,mobile,email,image');        $this->db->where('id', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows >= 1) {            return $query->result_array();        }        return false;    }    /* Update user profile details */    function update_user_profile_details($user_id, $user_details) {        if ($user_details["password"] == "") {            unset($user_details["password"]);        } else {            $user_details["password"] = md5($user_details["password"]);        }        $this->db->where('id', $user_id);        $query = $this->db->update($this->table_name, $user_details);    }    /* Get user profile picture */    function get_user_profile_picture($user_id) {        $this->db->select('image,first_name,last_name');        $this->db->where('id', $user_id);        $query = $this->db->get($this->table_name);        if ($query->num_rows >= 1) {            return $query->result_array();        }        return false;    }    // Login    /**     * Get user record by login (username or email)     *     * @param	string     * @return	object     */    function get_user_by_login($username) {        $this->db->select($this->table_name . '.*');        $this->db->select('user_history.date');        $this->db->where('LOWER(username)=', strtolower($username));        $this->db->where('user_history.type', 'doj');        $this->db->where('user_history.date <=', date('Y-m-d'));        $this->db->join('user_history', 'user_history.user_id=' . $this->table_name . '.id');        $query = $this->db->get($this->table_name);        //print_r($query->row());exit;        if ($query->num_rows() == 1)            return $query->row();        return NULL;    }    /* Get users Date of leaving date for deactivate the user */    function get_users_dol_for_deactivate($date) {        $this->db->select('user_history.date,user_history.user_id');        $this->db->where('type', 'dol');        $this->db->where('user_history.date', $date);        $this->db->join('user_history', 'user_history.user_id=' . $this->table_name . '.id');        $query = $this->db->get($this->table_name);        /* print_r($query->row());exit; */        if ($query->num_rows() >= 1)            return $query->result_array();        return NULL;    }    function get_user_mail_id_by_user_id($user_id) {        $this->db->select('email');        $this->db->select("CONCAT_WS(' ', first_name, last_name ) AS name");        $this->db->where('id', $user_id);        $query = $this->db->get($this->table_name);        /* print_r($query->row());exit; */        if ($query->num_rows() == 1)            return $query->result_array();        return NULL;    }    function get_last_user_id($limit = 1) {        $this->db->select('employee_id');        $this->db->limit($limit);        $this->db->order_by('id', 'desc');        $query = $this->db->get($this->table_name);        if ($query->num_rows() >= 1) {            return $query->result_array();        }        return false;    }    public function get_all_ttbs_users() {        $this->db->select('*');        //$this->db->where('status', 1);        //$this->db->where_not_in('id', 1);        $query = $this->db->get('erp_user')->result_array();        echo "<pre>";        print_r($query);        exit;    }    public function get_all_users_daily_attendance() {        $start_date = date('Y-m-d');        $end_date = date('Y-m-d');        $date = array();        if (!empty($this->input->post()) && !empty($this->input->post('start_date'))) {            $postArr = $this->input->post();            // echo "<pre>"; print_r($postArr); exit;            $start_date = date('Y-m-d', strtotime($postArr['start_date']));            $end_date = date('Y-m-d', strtotime($postArr['end_date']));        }        $i = 0;        while (strtotime($start_date) <= strtotime($end_date)) {            $this->db->select($this->table_name . '.*');            $this->db->select('user_shift.shift_id as shift_id');            $this->db->select('shift.name as shift');            $this->db->select('attendance.in,attendance.out,attendance.created');            $this->db->select('break_table.in_time,out_time');            $this->db->where($this->table_name . '.status', 1);            $this->db->where('DATE_FORMAT(attendance.created,"%Y-%m-%d")', $start_date);            //$this->db->where('DATE_FORMAT(attendance.created,"%Y-%m-%d") >=', $start_date);            //$this->db->where('DATE_FORMAT(attendance.created,"%Y-%m-%d") <=', $end_date);            $this->db->join('user_shift', 'user_shift.user_id = users.id', 'left');            $this->db->join('shift', 'user_shift.shift_id = shift.id', 'left');            $this->db->join('attendance', 'attendance.user_id = users.id', 'left');            $this->db->join('break_table', 'break_table.attendance_id = attendance.id', 'left');            $this->db->group_by('users.id');            $query = $this->db->get($this->table_name)->result_array();            $date[$i][$start_date] = $query;            $start_date = date("Y-m-d", strtotime("+1 day", strtotime($start_date)));            $i++;        }        return $date;    }}
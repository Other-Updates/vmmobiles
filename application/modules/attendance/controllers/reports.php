<?phpclass Reports extends MX_Controller {    function construct() {        parent::__construct();        $this->load->library('user_auth');        $this->load->helper('url');        $this->load->library('session');//        $this->load->library('session_view');        $this->load->helper('form');        $this->load->library("pagination");        $this->load->model('attendance_model');//        if (!$this->user_auth->active_application()) {////            redirect($this->config->item("base_url") . "users/login/");//        }////        if ($this->router->method == "index")//            $this->router->method = "attendance_reports";////////        if (!$this->user_auth->get_user_permission($this->router->class . ":" . $this->router->method)) {////////            $this->session_messages->add_message('warning', 'You dont have permission to access this area');////            redirect($this->config->item("base_url") . "users/");//        }//        $datam["messages"] = $this->session_messages->view_all_messages();        //print_r($this->session->all_userdata());//        $this->template->write_view('session_msg', 'masters/session_messages', $datam);    }    function index() {        redirect($this->config->item('base_url') . "attendance/reports/attendance_reports");    }    function attendance_reports($page = null) {        $this->load->library('session_view');        $this->load->model('attendance/attendance_model');//        $session = $this->session_view->get_session('reports', 'attendance_reports');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('attendance/leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('masters/user_history_model');        //$this->users_model->create_view_for_tds();        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);//        echo "<pre>";//        print_r($settings);//        exit;        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();//        echo '<pre>';//        print_r($this->input->post());//        exit;        if ($this->input->post("go")) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            //print_r($filter);            //exit;            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'attendance_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/attendance_reports/");        }        else {            $filter = $this->session_view->get_session('reports', 'attendance_reports');//            print_r($filter);//            exit;            if (isset($filter) && !empty($filter)) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                if (date('d') > $data["month_starting_date"])                    $month = date('m');                else                    $month = date('m') - 1;                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'attendance_reports', $filter);                $user_type = 2;            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users"]);        //print_r($result["total_rows"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/attendance_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;//        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        $default = "all";        if ($default == "all") {            //echo "Comes Here Only ..";            $users = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        } else {            //echo ".............................";            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        }        //echo '<pre>';        // print_r($users);        // exit;        //echo $this->db->last_query();        //print_r(count($users));        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $att = $family = $leave = $holiday = $salary = $salary_group = $address = $available = $shift = array();                $att = $this->attendance_model->get_attendance_by_between_dates($user["id"], $start_date, $end_date);                $family = $this->family_model->get_family_member_by_relation_and_user_id($user["id"], 'father');                $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user["id"], $start_date, $end_date);                if (empty($family))                    $family = $this->family_model->get_family_member_by_relation_and_user_id($user["id"], 'husband');                $address = $this->address_model->get_address_by_user_id($user["id"]);                $holiday = $this->holidays_model->get_holidays_by_between_dates($user["id"], $start_date, $end_date, $user["dept"]);                $available = $this->available_leaves_model->get_user_leaves_by_user_id($user["id"]);                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["salary_group"][] = $salary_group;                $data["attendance"][] = $att;                $data["family"][] = $family;                $data["leave"][] = $leave;                $data["address"][] = $address;                $data["available"][] = $available;//                echo '<pre>';//                print_r($available);//                exit;                //}                //else                //unset($user);            }        }        //if(isset($data["users"]) && !empty($data["users"]))        //$result["total_rows"] = count($data["users"]);        $data["start_page"] = $page;        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //$data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        //  echo "<pre>";print_r($data);exit;        $this->template->write_view('content', 'attendance/attendance_reports', $data);        $this->template->render();    }    function wage_reports($page = null) {        $this->load->model('attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('documents/incentives_model');        $this->load->model('documents/allowances_model');        $this->load->model('documents/deductions_model');        $this->load->model('documents/tds_model');        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();        if ($this->input->post("go")) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            //print_r($filter);            //exit;            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'wage_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/wage_reports/");        }        else {            $filter = $this->session_view->get_session('reports', 'wage_reports');            //print_r($filter);            //exit;            if (isset($filter) && !empty($filter) && !empty($filter["month"])) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                $cur_month = date('m');                if (date('d') >= $data["month_starting_date"])                    $month = date('m');                else                    $month = ($cur_month == 1) ? 12 : (date('m') - 1);                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                //$filter = array("year"=>date('Y'),'month'=>date('m'));                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'wage_reports', $filter);                $user_type = 2;            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/wage_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        //echo $this->db->last_query();//        print_r($filter);//        exit;        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                /* $day_value ="01-".$filter['month']."-".$filter['year'];                  $salary = $this->user_salary_model->get_user_salary_by_user_id($user["id"],$day_value);                  $shift = $this->user_shift_model->get_user_current_shift_by_user_id($user["id"],$day_value); */                //if(isset($salary)&& !empty($salary) && isset($shift) && !empty($shift)){                $att = $family = $leave = $holiday = $salary = $salary_group = $address = $available = $shift = array();                $att = $this->attendance_model->get_attendance_by_between_dates($user["id"], $start_date, $end_date);                $family = $this->family_model->get_family_member_by_relation_and_user_id($user["id"], 'father');                $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user["id"], $start_date, $end_date);                if (empty($family))                    $family = $this->family_model->get_family_member_by_relation_and_user_id($user["id"], 'husband');                $address = $this->address_model->get_address_by_user_id($user["id"]);                $holiday = $this->holidays_model->get_holidays_by_between_dates($user["id"], $start_date, $end_date, $user["dept"]);                //$shift = $this->shift_model->get_shift_details_by_shift_id($user["shift"]);                $available = $this->available_leaves_model->get_user_leaves_by_user_id($user["id"]);                $incentive = $this->incentives_model->get_user_incentives_by_user_id_and_date($user["id"], $start_date, $end_date);                $allowance = $this->allowances_model->get_user_allowances_by_user_id_and_date($user["id"], $start_date, $end_date);                $deduction = $this->deductions_model->get_user_deductions_by_user_id_and_date($user["id"], $start_date, $end_date);                $tds = $this->tds_model->get_user_tds_by_user_id_and_date($user["id"], $start_date, $end_date);                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["salary_group"][] = $salary_group;                $data["attendance"][] = $att;                $data["family"][] = $family;                $data["leave"][] = $leave;                $data["address"][] = $address;                $data["available"][] = $available;                $data["incentive"][] = $incentive;                $data["allowance"][] = $allowance;                $data["deduction"][] = $deduction;                $data["tds"][] = $tds;                //}                //else                //unset($user);            }        }        //if(isset($data["users"]) && !empty($data["users"]))        //$result["total_rows"] = count($data["users"]);        $data["start_page"] = $page;        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //$data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        //$this->pre_print->viewExit($users);        $this->template->write_view('content', 'attendance/wage_reports', $data);        $this->template->render();    }    /* function overtime_reports() {      $this->load->model('attendance_model');      $this->load->model('masters/users_model');      $this->load->model('masters/available_leaves_model');      $this->load->model('leave_model');      $this->load->model('masters/department_model');      $this->load->model('masters/designation_model');      $this->load->model('masters/shift_model');      $this->load->model('masters/options_model');      $this->load->model('masters/holidays_model');      $this->load->model('masters/user_salary_model');      $this->load->model('masters/salary_group_model');      $this->load->model('masters/shift_model');      $this->load->model('masters/user_shift_model');      $this->load->library('session_view');      $result = array();      $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');      $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');      $settings = $this->options_model->get_option_by_name($options);      if (isset($settings) && !empty($settings)) {      foreach ($settings as $set) {      $data[$set["key"]] = $set["value"];      }      }      if ($this->input->post("go")) {      //print_r($this->input->post());      $filter = $this->input->post();      if (isset($filter["go"]))      unset($filter["go"]);      $year = $filter["year"];      $month = $filter["month"];      $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);      $start_date = $filter["start_date"];      $end_date = $filter["end_date"];      $user_type = $filter["user_type"];      $this->users_model->create_view_for_normal_users($end_date);      $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);      $this->session_view->add_session('reports', 'overtime_reports', $filter);      redirect($this->config->item('base_url') . "attendance/reports/overtime_reports/");      }      else {      $filter = array();      $filter = $this->session_view->get_session('reports', 'overtime_reports');      if (isset($filter) && !empty($filter)) {      $year = $filter["year"];      $month = $filter["month"];      $user_type = $filter["user_type"];      $start_date = $filter["start_date"];      $end_date = $filter["end_date"];      $this->users_model->create_view_for_normal_users($end_date);      $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);      } else {      $year = date('Y');      //echo $data["month_starting_date"];      if (date('d') > $data["month_starting_date"])      $month = date('m') - 1;      else      $month = date('m') - 2;      $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);      $day = $data["month_starting_date"];      if ($data["month_starting_date"] == 1) {      if ($month != 12) {      $start_date = $year . "-" . $month . "-" . $day;      $end_date = $year . "-" . $month . "-" . $days;      } else {      $start_date = $year . "-" . $month . "-" . $day;      //$end_date = ($year+1)."-1-".$days;      $end_date = ($year) . "-12-31";      }      } else {      if ($month != 12) {      $start_date = $year . "-" . $month . "-" . $day;      $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);      } else {      $start_date = $year . "-" . $month . "-" . $day;      $end_date = ($year + 1) . "-1-" . ($day - 1);      }      }      $this->users_model->create_view_for_normal_users($end_date);      $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);      $user_type = 2;      $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);      $this->session_view->add_session('reports', 'overtime_reports', $filter);      }      }      //$result["total_rows"] = $data["no_of_users"][0]['count'];      if (isset($filter["show_count"]))      $default = $filter["show_count"];      else {      if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))      $default = $data["default_number_of_records"][0]["value"];      else      $default = 10;      }      $result["base_url"] = $this->config->item('base_url') . "attendance/reports/overtime_reports/";      $result["per_page"] = $default;      $result["num_links"] = 3;      $result["uri_segment"] = 4;      $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';      $result['full_tag_close'] = '</ul>';      $result['prev_link'] = '&lt;';      $result['prev_tag_open'] = '<li>';      $result['prev_tag_close'] = '</li>';      $result['next_link'] = '&gt;';      $result['next_tag_open'] = '<li>';      $result['next_tag_close'] = '</li>';      $result['cur_tag_open'] = '<li class="current"><a href="#">';      $result['cur_tag_close'] = '</a></li>';      $result['num_tag_open'] = '<li>';      $result['num_tag_close'] = '</li>';      $result['first_tag_open'] = '<li>';      $result['first_tag_close'] = '</li>';      $result['last_tag_open'] = '<li>';      $result['last_tag_close'] = '</li>';      $result['first_link'] = '&lt;&lt;';      $result['last_link'] = '&gt;&gt;';      $result["total_rows"] = count($data["no_of_users"]);      //$this->pagination->initialize($result);      //$this->pagination->initialize($result);      $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;      $data["count"] = 10;      $this->users_model->create_view_for_normal_users($end_date);      if ($default == "all")      $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);      else      $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);      //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);      //	echo $page;      //print_r($filter);      //exit;      if (isset($users) && !empty($users)) {      foreach ($users as $user) {      $day_value = "01-" . $filter['month'] . "-" . $filter['year'];      $salary = $this->user_salary_model->get_user_salary_by_user_id($user["id"], $day_value);      $shift = $this->user_shift_model->get_user_current_shift_by_user_id($user["id"], $day_value);      //if(isset($salary)&& !empty($salary) && isset($shift) && !empty($shift)){      $att = $leave = $holiday = $salary = $salary_group = $available = $shift = array();      $att = $this->attendance_model->get_attendance_by_between_dates($user["id"], $start_date, $end_date);      $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user["id"], $start_date, $end_date);      $holiday = $this->holidays_model->get_holidays_by_between_dates($user["id"], $start_date, $end_date, $user["dept"]);      $available = $this->available_leaves_model->get_user_leaves_by_user_id($user["id"]);      if (isset($salary) && !empty($salary)) {      $salary_group = $this->salary_group_model->get_salary_group_split_by_salary_group_id($salary[0]["salary_group"]);      }      $data["users"][] = $user;      $data["holiday"][] = $holiday;      $data["salary_group"][] = $salary_group;      $data["attendance"][] = $att;      $data["leave"][] = $leave;      $data["available"][] = $available;      /* }      else      {      unset($user);      }      }      }      $data["links"] = $this->pagination->create_links();      $data["start_page"] = $page;      $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');      $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');      $data["departments"] = $this->department_model->get_all_departments_by_status(1);      $data["designations"] = $this->designation_model->get_all_designations();      $data["shifts"] = $this->shift_model->get_all_shifts();      $data["year"] = $year;      $data["month"] = $month;      $data["start_date"] = $start_date;      $data["end_date"] = $end_date;      $data["user_type"] = $user_type;      //$this->pre_print->viewExit($data);      //echo "<pre>";print_r($users);exit;      $this->template->write_view('content', 'attendance/overtime_reports', $data);      $this->template->render();      } */    function over_time_attendance_reports() {        $data = [];        $this->load->model('attendance/attendance_model');        $post_data = $this->input->post();        $start_date = date('Y-m-01');        $end_date = date('Y-m-t');        if ($post_data != "") {            if ($post_data['start_date'] != "") {                $start_date = date('Y-m-d', strtotime($post_data['start_date']));            }            if ($post_data['end_date'] != "") {                $end_date = date('Y-m-d', strtotime($post_data['end_date']));            }        }        $data['over_reports'] = $this->attendance_model->get_over_time_reports($start_date, $end_date);        $data['start_date'] = $start_date;        $data['end_date'] = $end_date;        $this->template->write_view('content', 'attendance/overtime_report_new', $data);        $this->template->render();    }    function users_salary_revision_reports() {        $this->load->model('masters/users_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $result = array();        $filter = null;        if ($this->input->post("search")) {            $filter = $this->input->post();            if (isset($filter["search"]))                unset($filter["search"]);            $data["no_of_users1"] = $this->users_model->get_filter_user_count($filter, 1);            $this->session_view->add_session(null, null, $filter);            redirect($this->config->item('base_url') . "attendance/reports/users_salary_revision_reports/");        }        else {            $filter = $this->session_view->get_session(null, null);            if (isset($filter) && !empty($filter)) {                $data["no_of_users1"] = $this->users_model->get_filter_user_count($filter, 1);            } else {                $data["no_of_users1"] = $this->users_model->get_users_count(1);            }            //print_r($filter);        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else            $default = 10;        if (isset($filter["inactive"]))            $data["status"] = TRUE;        //$result['suffix'] = '?show='.$default ;        $result["total_rows"] = $data["no_of_users1"][0]['count'];        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/users_salary_revision_reports/";        $result["per_page"] = $default;        $data["count"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 3;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $this->pagination->initialize($result);        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        if ($default == "all")            $data['users'] = $this->users_model->get_users_with_dept($filter, 1);        else            $data['users'] = $this->users_model->get_users_with_dept_by_limit($result["per_page"], $page, $filter, 1);        $data["links"] = $this->pagination->create_links();        $data["start"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //print_r($filter);        //$this->pre_print->viewExit($data);        $this->template->write_view('content', 'attendance/users_salary_reports', $data);        $this->template->render();    }    public function salary_revision_reports($user_id) {        $this->load->model('masters/options_model');        $this->load->model('masters/users_model');        $this->load->model('masters/address_model');        $this->load->model('masters/identification_model');        $this->load->model('masters/family_model');        $this->load->model('masters/user_history_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $data["settings"] = $this->options_model->get_options_by_type('company_name');        $data["place"] = $this->options_model->get_options_by_type('place');        $data["user"] = $this->users_model->get_user_name_by_id($user_id);        $data["address"] = $this->address_model->get_address_by_user_id($user_id);        $data["identification"] = $this->identification_model->get_identifications_by_user_id($user_id);        $data["family"] = $this->family_model->get_family_member_by_relation_and_user_id($user_id, 'father');        $data["user_salary"] = $this->user_salary_model->get_all_user_salary_by_user_id($user_id);        if (empty($data["family"]))            $data["family"] = $this->family_model->get_family_member_by_relation_and_user_id($user_id, 'husband');        if (isset($data["user_salary"]) && !empty($data["user_salary"])) {            foreach ($data["user_salary"] as $val) {                $data["salary_group"][$val["salary_group"]] = $this->salary_group_model->get_salary_group_split_by_salary_group_id($val["salary_group"]);            }        }        $data["user_id"] = $user_id;        $data["history"] = $this->user_history_model->get_history_by_user_id($user_id);        //$this->pre_print->viewExit($data);        $this->template->write_view('content', 'attendance/user_salary_revision_reports', $data);        $this->template->render();    }    function wage_process_reports() {        $this->load->model('masters/users_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('documents/salary_process_model');        $result = array();        $filter = null;        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'saturday_holiday', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        //print_r($settings);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $key => $set) {                $data[$set["key"]] = $set["value"];            }        }        if ($this->input->post("search")) {            $filter = $this->input->post();            //print_r($filter);exit;            $day_value = date('d-m-Y');            if (isset($filter["go"]))                unset($filter["go"]);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $month_start_date = $filter["month_start_date"];            $month_end_date = $filter["month_end_date"];            $year = $filter["year"];            $month = $filter["month"];            if (strtotime($start_date) < strtotime($month_start_date)) {                $start_date_val = $start_date;            } else {                $start_date_val = $month_start_date;            }            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users1"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date_val);            $this->session_view->add_session(null, null, $filter);            redirect($this->config->item('base_url') . "attendance/reports/wage_process_reports/");        } else {            $filter = $this->session_view->get_session(null, null);            if (isset($filter) && !empty($filter)) {                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $month_start_date = $filter["month_start_date"];                $month_end_date = $filter["month_end_date"];                $year = $filter["year"];                $month = $filter["month"];                if (strtotime($start_date) < strtotime($month_start_date)) {                    $start_date_val = $start_date;                } else {                    $start_date_val = $month_start_date;                }                //print_r($filter);                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users1"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date_val);                //print_r($data["no_of_users1"]);            } else {                $year = date('Y');                $month = date('m');                $day = $data["month_starting_date"];                $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month, $year);                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days_in_month;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days_in_month;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $month_start_date = $year . "-" . $month . "-1";                $month_end_date = $year . "-" . $month . "-" . $days_in_month;                if (strtotime($start_date) < strtotime($month_start_date)) {                    $start_date_val = $start_date;                } else {                    $start_date_val = $month_start_date;                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users1"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date_val);                $filter = array("year" => $year, 'month' => $month, "month_start_date" => $month_start_date, "month_end_date" => $month_end_date, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'wage_process_reports', $filter);            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        //$result['suffix'] = '?show='.$default ;        $result["total_rows"] = count($data["no_of_users1"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/wage_process_reports/";        $result["per_page"] = $default;        $data["count"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $this->pagination->initialize($result);        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date_val);        else            $data['users'] = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date_val, $result["per_page"], $page);        //echo $this->db->last_query();        $data["links1"] = $this->pagination->create_links();        $data["start_page"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        $data["salary_groups"] = $this->salary_group_model->get_all_salary_groups();        $data["shifts"] = $this->shift_model->get_all_shifts();        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["month_start_date"] = $month_start_date;        $data["month_end_date"] = $month_end_date;        $data["year"] = $year;        $data["month"] = $month;        //$this->pre_print->viewExit($data);        //exit;        $this->template->write_view('content', 'attendance/salary_process_reports', $data);        $this->template->render();    }    function incentive_reports() {        $this->load->model('attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('documents/incentives_model');        $options = array('company_name', 'place', 'district', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();        if ($this->input->post("go")) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'incentive_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/incentive_reports/");        }        else {            $filter = $this->session_view->get_session('reports', 'incentive_reports');            //print_r($filter);            //exit;            if (isset($filter) && !empty($filter) && !empty($filter["month"])) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                $cur_month = date('m');                if (date('d') >= $data["month_starting_date"])                    $month = date('m');                else                    $month = ($cur_month == 1) ? 12 : (date('m') - 1);                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'incentive_reports', $filter);                $user_type = 2;            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/incentive_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $incentive = $this->incentives_model->get_user_incentives_by_user_id_and_date($user["id"], $start_date, $end_date);                $data["users"][] = $user;                $data["incentive"][] = $incentive;            }        }        //if(isset($data["users"]) && !empty($data["users"]))        //$result["total_rows"] = count($data["users"]);        $data["start_page"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //$data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        //$this->pre_print->viewExit($data);        $this->template->write_view('content', 'attendance/incentive_reports', $data);        $this->template->render();    }    function allowance_reports() {        $this->load->model('attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('documents/allowances_model');        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();        if ($this->input->post("go")) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            //print_r($filter);            //exit;            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'allowance_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/allowance_reports/");        }        else {            $filter = $this->session_view->get_session('reports', 'allowance_reports');            //print_r($filter);            //exit;            if (isset($filter) && !empty($filter) && !empty($filter["month"])) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                $cur_month = date('m');                if (date('d') >= $data["month_starting_date"])                    $month = date('m');                else                    $month = ($cur_month == 1) ? 12 : (date('m') - 1);                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'allowance_reports', $filter);                $user_type = 2;            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/allowance_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $users = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $allowance = $this->allowances_model->get_user_allowances_by_user_id_and_date($user["id"], $start_date, $end_date);                $data["users"][] = $user;                $data["allowance"][] = $allowance;            }        }        //if(isset($data["users"]) && !empty($data["users"]))        //$result["total_rows"] = count($data["users"]);        $data["start_page"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //$data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        //$this->pre_print->viewExit($data);        $this->template->write_view('content', 'attendance/allowance_reports', $data);        $this->template->render();    }    function deduction_reports() {        $this->load->model('attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('documents/deductions_model');        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();        if ($this->input->post("go")) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            //print_r($filter);            //exit;            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'deduction_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/deduction_reports/");        }        else {            $filter = $this->session_view->get_session('reports', 'deduction_reports');            //print_r($filter);            //exit;            if (isset($filter) && !empty($filter) && !empty($filter["month"])) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                if (date('d') >= $data["month_starting_date"])                    $month = date('m');                else                    $month = ($cur_month == 1) ? 12 : (date('m') - 1);                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $end_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'deduction_reports', $filter);                $user_type = 2;            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/deduction_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $users = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $deduction = $this->deductions_model->get_user_deductions_by_user_id_and_date($user["id"], $start_date, $end_date);                $data["users"][] = $user;                $data["deduction"][] = $deduction;            }        }        //if(isset($data["users"]) && !empty($data["users"]))        //$result["total_rows"] = count($data["users"]);        $data["start_page"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //$data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        //$this->pre_print->viewExit($data);        $this->template->write_view('content', 'attendance/deduction_reports', $data);        $this->template->render();    }    function time_reports() {        //echo $_SERVER['HTTP_USER_AGENT'];        $this->load->model('masters/users_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('documents/salary_process_model');        $this->load->model('attendance/attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('attendance/leave_model');        $this->load->model('masters/options_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_roles_model');        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $data["roles"] = $this->user_roles_model->get_user_role($this->user_auth->get_user_id());        $result = array();        $filter = null;        $options = array('min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        if ($this->input->post("search")) {            $filter = $this->input->post();            if (isset($filter["search"]))                unset($filter["search"]);            $filter["start_date"] = date("Y-m-d", strtotime($filter["start_date"]));            $filter["end_date"] = date("Y-m-d", strtotime($filter["end_date"]));            $filter["user_type"] = $filter["user_type"];            $this->session_view->add_session(null, null, $filter);            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users1"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $filter["end_date"], $filter["start_date"]);            redirect($this->config->item('base_url') . "attendance/reports/time_reports/");        }        else {            $filter = $this->session_view->get_session(null, null);            if (isset($filter) && !empty($filter)) {                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $start_date = date("Y-m-d", strtotime($filter["start_date"]));                $end_date = date("Y-m-d", strtotime($filter["end_date"]));                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users1"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $start_date = date("Y-m-01");                $end_date = date("Y-m-d");                $filter = array("user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $user_type = 2;                $filter = array("user_type" => $user_type, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session(null, null, $filter);                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users1"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $filter["end_date"], $filter["start_date"]);            }        }        if ($this->input->post("time_report")) {            $filters = $this->input->post();            //print_r($filters);            if (isset($filter["time_report_data"]))                unset($filter["time_report_data"]);            foreach ($filters["time_report_data"] as $key => $val) {                $user_id[] = $key;            }            $filter["user_id"] = $user_id;            $this->session_view->add_session('reports', 'time_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/view_time_reports/");        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users1"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/time_reports/";        $result["per_page"] = $default;        $data["count"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $this->pagination->initialize($result);        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        //$filter_start_date = date("Y-m-d",strtotime($filter["start_date"]));        //$filter_end_date = date("Y-m-d",strtotime($filter["end_date"]));        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $filter["end_date"], $filter['start_date']);        else            $data['users'] = $this->users_model->get_users_with_shift_salary($filter, 1, null, $filter["end_date"], $filter["start_date"], $result["per_page"], $page, null);        //echo $this->db->last_query();        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["attendance"][] = $att;                $data["leave"][] = $leave;                $data["available"][] = $available;            }        }        $data["links1"] = $this->pagination->create_links();        $data["start_page"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        $data["salary_groups"] = $this->salary_group_model->get_all_salary_groups();        $data["shifts"] = $this->shift_model->get_all_shifts();        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        //$this->pre_print->viewExit($filter);        $this->template->write_view('content', 'attendance/time_reports', $data);        $this->template->render();    }    function view_time_reports($page = null) {        $this->load->model('attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('masters/user_department_model');        $this->load->model('masters/user_history_model');        $this->load->model('attendance_model');        $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        //print_r($data["attendance_threshold"]);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();        if ($this->input->post("go")) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            //print_r($filter);            //exit;            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $start_date, $end_date);            $this->session_view->add_session('reports', 'attendance_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/attendance_reports/");        }        else {            //$filter = $this->session_view->get_session('reports','attendance_reports');            $filter = $this->session_view->get_session('reports', 'time_reports');            //print_r($filter);            if (isset($filter) && !empty($filter)) {                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $data["no_of_users"] = count($filter["user_id"]);            }        }        $result["total_rows"] = count($data["no_of_users"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/view_time_reports/";        $result["per_page"] = 10;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $users = $filter["user_id"];        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $start_date = date("Y-m-d", strtotime($start_date));                $end_date = date("Y-m-d", strtotime($end_date));                $att = $leave = $holiday = $leave = array();                $att = $this->attendance_model->get_attendance_by_between_dates($user, $start_date, $end_date);                //print_r($att);                $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user, $start_date, $end_date);                $dept_id = $this->user_department_model->get_department_by_user_id($user);                $holiday = $this->holidays_model->get_holidays_by_between_dates($user, $start_date, $end_date, $dept_id[0]["department"]);                //echo $this->db->last_query();                //$available = $this->available_leaves_model->get_user_leaves_by_user_id($user);                $history = $this->user_history_model->get_history_by_user_id_and_type($user, 'dol');                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["attendance"][] = $att;                $data["leave"][] = $leave;                $data["history"][] = $history;            }        }        $data["start_page"] = $page;        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        //$this->pre_print->viewExit($data);        $this->template->write_view('content', 'attendance/view_time_reports', $data);        $this->template->render();    }    function tds_reports() {        $this->load->model('masters/users_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('masters/user_history_model');        $this->load->model('documents/tds_model');        $options = array('company_name', 'place', 'district', 'month_starting_date');        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        //print_r($this->session->all_userdata());        $result = array();        if ($this->input->post("go")) {            $filter = $this->input->post();            //print_r($filter);exit;            //$day_value = date('d-m-Y');            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            //$days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            //$user_type = $filter["user_type"];            $this->users_model->create_view_for_tds($start_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $start_date, null);            $this->session_view->add_session(null, null, $filter);            redirect($this->config->item('base_url') . "attendance/reports/tds_reports/");        }        else {            $filter = $this->session_view->get_session('reports', 'tds_reports');            //print_r($filter);            //exit;            if (isset($filter) && !empty($filter)) {                $year = $filter["year"];                $start_date = $filter["start_date"];                $this->users_model->create_view_for_tds($start_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $start_date, null);            } else {                $year = date('Y');                $day = $data["month_starting_date"];                $start_date = $year . "-1-" . $day;                $filter = array("year" => $year, "start_date" => $start_date);                $this->users_model->create_view_for_tds($start_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $start_date, null);                $this->session_view->add_session(null, null, $filter);            }        }        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["total_rows"] = count($data["no_of_users"]);        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/tds_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $this->pagination->initialize($result);        $data["links"] = $this->pagination->create_links();        $data["count"] = $default;        $this->users_model->create_view_for_tds($start_date);        if ($default == "all")            $users = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $start_date, null);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $start_date, null, $result["per_page"], $page);        //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $user_doj = $this->user_history_model->get_history_by_user_id_and_type($user["id"], 'doj');                $data["users"][] = $user;                $data["user_doj"][] = $user_doj;            }        }        $data["start_page"] = $page;        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        //$data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["start_date"] = $start_date;        if ($year == date('Y') + 1)            $month = date('m') - 1;        else            $month = 12;        /* if(date('d')>$data["month_starting_date"])          $month = date('m')-1;          else          $month = date('m')-2;         */        for ($i = 0; $i < $month; $i++) {            $start_date_arr[$i] = $year . "-" . ($i + 1) . "-" . $data["month_starting_date"];            if ($data["month_starting_date"] == 1) {                $days = cal_days_in_month(CAL_GREGORIAN, $i + 1, $year);                $end_date_arr[$i] = $year . "-" . ($i + 1) . "-" . $days;            } else {                if ($i == 12)                    $end_date_arr[$i] = ($year + 1) . "-1-" . ($data["month_starting_date"] - 1);                else                    $end_date_arr[$i] = $year . "-" . ($i + 2) . "-" . ($data["month_starting_date"] - 1);            }        }        $data["start_date_arr"] = $start_date_arr;        $data["end_date_arr"] = $end_date_arr;        $this->template->write_view('content', 'attendance/tds_reports', $data);        $this->template->render();    }    public function excel_report() {        $this->load->library('session_view');        $this->load->model('attendance/attendance_model');        $filter = $this->session_view->get_session('reports', 'attendance_reports');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/users_model');        $this->load->model('attendance/leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/family_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/address_model');        $this->load->model('masters/user_shift_model');        $this->load->model('masters/user_history_model');        $year = $filter["year"];        $month = $filter["month"];        $start_date = $filter["start_date"];        $end_date = $filter["end_date"];        $user_type = $filter["user_type"];        $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        $users = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $att = $family = $leave = $holiday = $salary = $salary_group = $address = $available = $shift = array();                $att = $this->attendance_model->get_attendance_by_between_dates($user["id"], $start_date, $end_date);                $family = $this->family_model->get_family_member_by_relation_and_user_id($user["id"], 'father');                $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user["id"], $start_date, $end_date);                if (empty($family))                    $family = $this->family_model->get_family_member_by_relation_and_user_id($user["id"], 'husband');                $address = $this->address_model->get_address_by_user_id($user["id"]);                $holiday = $this->holidays_model->get_holidays_by_between_dates($user["id"], $start_date, $end_date, $user["dept"]);                $available = $this->available_leaves_model->get_user_leaves_by_user_id($user["id"]);                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["salary_group"][] = $salary_group;                $data["attendance"][] = $att;                $data["family"][] = $family;                $data["leave"][] = $leave;                $data["address"][] = $address;                $data["available"][] = $available;            }        }        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        $this->load->view('attendance_report_excel', $data);    }    public function monthly_attendance_view($user_id = NULL) {        $this->load->model('attendance/attendance_model');        $this->load->model('masters/user_department_model');        $this->load->model('masters/users_model');        $data = [];        $data['start_date'] = date('Y-m-01');        $data['end_date'] = date('Y-m-d');        $user_id = $user_id;        if (!empty($this->input->post()) && !empty($this->input->post('start_date'))) {            $postArr = $this->input->post();            if ($postArr['start_date'] != "")                $data['start_date'] = date('Y-m-d', strtotime($postArr['start_date']));            if ($postArr['end_date'] != "")                $data['end_date'] = date('Y-m-d', strtotime($postArr['end_date']));        }        $start_date = $data['start_date'];        $end_date = $data['end_date'];        while (strtotime($start_date) <= strtotime($end_date)) {            $start_dates[] = $start_date;            $start_date = date("Y-m-d", strtotime("+1 days", strtotime($start_date)));        }        $data["name"] = $this->users_model->get_user_name_by_user_id($user_id);        $data["dept"] = $this->user_department_model->get_department_by_user_id($user_id);        $data['users_data'] = $this->attendance_model->get_monthly_users_list_view($start_dates, $user_id);        // echo "<pre>";print_r($data);exit;        $this->template->write_view('content', 'attendance/monthly_attendance_view', $data);        $this->template->render();    }    public function monthly_attendance_view1($user_id = NULL) {        $year = $month = '';        $post_data = $this->input->post();        if (empty($post_data))            $session_data = $this->session->userdata('monthly_attendance');        if (!empty($session_data)) {            $user_id = $session_data['emp_id'];            $year = $session_data['year'];            $month = $session_data['month'];            unset($session_data);            //$this->session->unset_userdata('monthly_attendance');        } elseif (!empty($post_data) && $post_data['user_id']) {            $user_id = $post_data['user_id'];        }        $this->load->model('masters/user_department_model');        $this->load->model('masters/users_model');        $this->load->model('masters/options_model');        $this->load->model('masters/shift_model');        $this->load->model('attendance_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('masters/user_salary_model');        $this->load->model('leave_model');        $this->load->model('pieces_model');        $this->load->model('masters/user_history_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_shift_model');        $this->load->model('masters/users_model');        $this->load->model('masters/user_roles_model');        $options = array('week_starting_day', 'month_starting_date', 'saturday_holiday');        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $admin_id = $this->user_auth->get_user_id();        $mail = array();        $admin_mail = $this->users_model->get_user_mail_id_by_user_id($admin_id);        $mail["admin"] = $admin_mail[0]["email"];        $mail["admin_name"] = $admin_mail[0]["name"];        $mail["user_id"] = $user_id;        $data["name"] = $this->users_model->get_user_name_by_user_id($user_id);        $settings = $this->options_model->get_option_by_name($options);        $data["doj"] = $this->user_history_model->get_history_by_user_id_and_type($user_id, 'doj');        $data["dol"] = $this->user_history_model->get_history_by_user_id_and_type($user_id, 'dol');        $data["dept"] = $this->user_department_model->get_department_by_user_id($user_id);        $joined_date = explode("-", $data["doj"][0]["date"]);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $key => $set) {                $data[$set["key"]] = $set["value"];            }        }        $ws_day = "";        if (!empty($data['week_starting_day']))            $ws_day = $this->week_starting_day($data['week_starting_day']);        if (!empty($post_data)) {            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            if (isset($filter["in_time"]))                unset($filter["in_time"]);            if (isset($filter["out_time"]))                unset($filter["out_time"]);            if (isset($filter["break"]))                unset($filter["break"]);            $data["year"] = $filter["year"];            $data["month"] = $filter["month"];            $data["start_date"] = $filter["start_date"];            $data["end_date"] = $filter["end_date"];            $data["month_start_date"] = $filter["month_start_date"];            $data["month_end_date"] = $filter["month_end_date"];            $data["from_date"] = $data["from_date_picker"] = date("Y-m-d", strtotime($filter["from_date_picker"]));            $data["end_date"] = $data["to_date_picker"] = date("Y-m-d", strtotime($filter["to_date_picker"]));            if (!empty($data["from_date"]) && !empty($data["end_date"])) {                $data["start_date"] = $data["from_date"];                $data["end_date"] = $data["end_date"];                $data["month_start_date"] = $data["from_date"];                $data["month_end_date"] = $data["end_date"];            }            // week end date            $nextMonthStart = mktime(0, 0, 0, $data["month"] + 1, 1, $data["year"]);            $last_saturday = date("Y-m-d H:i:s", strtotime("previous " . $ws_day, $nextMonthStart));            $next_date2 = new DateTime($last_saturday . ' +6 day');            $data["week_end_date"] = $next_date2->format('Y-m-d');            // week start date            $nextMonthStart = mktime(0, 0, 0, $data["month"], 1, $data["year"]);            $last_saturday_date = date("d", strtotime("first " . $ws_day, $nextMonthStart));            if (ltrim($last_saturday_date, '0') == 8)                $last_saturday_date = 01;            $data["week_start_date"] = $data["year"] . "-" . $data["month"] . "-" . $last_saturday_date;            if (strtotime($data["start_date"]) < strtotime($data["month_start_date"])) {                $start_date_val = $data["start_date"];            } else {                $start_date_val = $data["month_start_date"];            }            if ($joined_date[0] == $data["year"]) {                if ($joined_date[1] = $data["month"]) {                    $start_date_val = $data["doj"][0]["date"];                }            }            $data["user_salary"] = $this->user_salary_model->get_user_salary_by_user_id($user_id, $start_date_val);            if ($data["user_salary"][0]["type"] == "monthly") {                $data["attendance_month"] = $this->attendance_model->get_attendance_by_between_dates($user_id, $data["start_date"], $data["end_date"]);                $data["leave"] = $this->leave_model->get_approved_user_leaves_by_between_dates($user_id, $data["start_date"], $data["end_date"]);                $data["holidays"] = $this->holidays_model->get_holidays_by_between_dates($user_id, $data["start_date"], $data["end_date"], $data["dept"][0]["department"]);            } else {                $data["attendance_month"] = $this->attendance_model->get_attendance_by_between_dates($user_id, $data["week_start_date"], $data["week_end_date"]);                $data["leave"] = $this->leave_model->get_approved_user_leaves_by_between_dates($user_id, $data["week_start_date"], $data["week_end_date"]);                $data["holidays"] = $this->holidays_model->get_holidays_by_between_dates($user_id, $data["week_start_date"], $data["week_end_date"], $data["dept"][0]["department"]);            }        } else {            if (isset($filter) && !empty($filter)) {                $data["year"] = $filter["year"];                $data["month"] = $filter["month"];                $data["start_date"] = $filter["start_date"];                $data["end_date"] = $filter["end_date"];                $data["month_start_date"] = $filter["month_start_date"];                $data["month_end_date"] = $filter["month_end_date"];                // week end date                $nextMonthStart = mktime(0, 0, 0, $data["month"] + 1, 1, $data["year"]);                $last_saturday = date("Y-m-d H:i:s", strtotime("previous " . $ws_day, $nextMonthStart));                $next_date2 = new DateTime($last_saturday . ' +6 day');                $data["week_end_date"] = $next_date2->format('Y-m-d');                // week start date                $nextMonthStart = mktime(0, 0, 0, $data["month"], 1, $data["year"]);                $last_saturday_date = date("d", strtotime("first " . $ws_day, $nextMonthStart));                if (ltrim($last_saturday_date, '0') == 8)                    $last_saturday_date = 01;                $data["week_start_date"] = $data["year"] . "-" . $data["month"] . "-" . $last_saturday_date;            }            else {                if (!empty($year) || !empty($month)) {                    if (!empty($year))                        $data["year"] = $year;                    else                        $data["year"] = date('Y');                    $data["month"] = $month;                } else {                    $data["year"] = date('Y');                    $data["month"] = date('m');                }                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($data["month"] != 12) {                        $data["start_date"] = $data["year"] . "-" . $data["month"] . "-" . $day;                        $data["end_date"] = $data["year"] . "-" . ($data["month"] + 1) . "-" . $day;                    } else {                        $data["start_date"] = $data["year"] . "-" . $data["month"] . "-" . $day;                        $data["end_date"] = ($data["year"]) . "-12-31";                        //$data["end_date"]= ($data["year"]+1)."-1-".$day-1;                    }                } else {                    if ($data["month"] != 12) {                        $data["start_date"] = $data["year"] . "-" . $data["month"] . "-" . $day;                        $data["end_date"] = $data["year"] . "-" . ($data["month"] + 1) . "-" . ($day - 1);                    } else {                        $data["start_date"] = $data["year"] . "-" . $data["month"] . "-" . $day;                        $data["end_date"] = ($data["year"] + 1) . "-1-" . ($day - 1);                    }                }                $days_in_month = cal_days_in_month(CAL_GREGORIAN, $data["month"], $data["year"]);                $data["month_start_date"] = $data["year"] . "-" . $data["month"] . "-1";                $data["month_end_date"] = $data["year"] . "-" . $data["month"] . "-" . $days_in_month;                // week end date                $nextMonthStart = mktime(0, 0, 0, $data["month"] + 1, 1, $data["year"]);                $last_saturday = date("Y-m-d H:i:s", strtotime("previous " . $ws_day, $nextMonthStart));                $next_date2 = new DateTime($last_saturday . ' +6 day');                $data["week_end_date"] = $next_date2->format('Y-m-d');                // week start date                $nextMonthStart = mktime(0, 0, 0, $data["month"], 1, $data["year"]);                $last_saturday_date = date("d", strtotime("first " . $ws_day, $nextMonthStart));                if (ltrim($last_saturday_date, '0') == 8)                    $last_saturday_date = 01;                $data["start_date"] = date('Y-m-01');                $data["end_date"] = date('Y-m-d');                $data["week_start_date"] = $data["year"] . "-" . $data["month"] . "-" . $last_saturday_date;            }            if (strtotime($data["start_date"]) < strtotime($data["month_start_date"])) {                $start_date_val = $data["start_date"];            } else {                $start_date_val = $data["month_start_date"];            }            if ($joined_date[0] == $data["year"]) {                if ($joined_date[1] = $data["month"]) {                    $start_date_val = $data["doj"][0]["date"];                }            }            $data["user_salary"] = $this->user_salary_model->get_user_salary_by_user_id($user_id, $start_date_val);            if ($data["user_salary"][0]["type"] == "monthly") {                $data["attendance_month"] = $this->attendance_model->get_attendance_by_between_dates($user_id, $data["start_date"], $data["end_date"]);                $data["leave"] = $this->leave_model->get_approved_user_leaves_by_between_dates($user_id, $data["start_date"], $data["end_date"]);                $data["holidays"] = $this->holidays_model->get_holidays_by_between_dates($user_id, $data["start_date"], $data["end_date"], $data["dept"][0]["department"]);            } else {                $data["attendance_month"] = $this->attendance_model->get_attendance_by_between_dates($user_id, $data["week_start_date"], $data["week_end_date"]);                $data["leave"] = $this->leave_model->get_approved_user_leaves_by_between_dates($user_id, $data["week_start_date"], $data["week_end_date"]);                $data["holidays"] = $this->holidays_model->get_holidays_by_between_dates($user_id, $data["week_start_date"], $data["week_end_date"], $data["dept"][0]["department"]);            }        }        //print_r($data["leave"]);        $day_value = $data["year"] . "-" . $data["month"] . "-1";        if ($joined_date[0] == $data["year"]) {            if ($joined_date[1] = $data["month"]) {                $day_value = $data["doj"][0]["date"];            }        }        $data["shift_first"] = $this->user_shift_model->get_user_current_shift_by_user_id($user_id, $day_value);        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $current_date = date("Y-m-d");        $data["today_attendance"] = $this->attendance_model->get_user_attendance_by_userid_and_date($user_id, $current_date);        $data["user_id"] = $user_id;        $data["user_status"] = $this->users_model->get_user_status_by_user_id($user_id);        $data["salary_type"] = $this->user_salary_model->get_user_salary_type_by_user_id($user_id);//        echo '<pre>';//        print_r($data);//        exit;        $this->template->write_view('content', 'attendance/monthly_attendance_view', $data);        $this->template->render();    }    function week_starting_day($week_starting_day) {        switch ($week_starting_day) {            case 0 :                $ws_day = "sunday";                break;            case 1 :                $ws_day = "monday";                break;            case 2 :                $ws_day = "tuesday";                break;            case 3 :                $ws_day = "wednesday";                break;            case 4 :                $ws_day = "thursday";                break;            case 5 :                $ws_day = "friday";                break;            case 6 :                $ws_day = "saturday";                break;        }    }    function monthly_attendance_sets() {        $input_data = $this->input->post();        $this->session->unset_userdata('monthly_attendance');        $this->session->set_userdata('monthly_attendance', $input_data);        echo "success";    }    function round_hours($time) {        $explode_time = explode(':', $time);        $hours = round($explode_time[0]);        if ($explode_time[1] == "00") {            $mins = "";        } else {            $mins = $explode_time[1];        }        $time = $hours . "." . $mins;        return $time;    }    function explode_time($time) {        $explode_time = explode(':', $time);        $time = $explode_time[0] . ":" . $explode_time[1];        return $time;    }    function get_emp_all_logs_by_day() {        $input_data = $this->input->post();        $this->load->model('attendance/attendance_model');        $created_date = $input_data["created_date"];        $in = $input_data["modal_in_time"];        $out = $input_data["modal_out_time"];        if ($out != "-") {            $totalduration = $this->explode_time($this->time_difference($out, $in));        } else {            $totalduration = '-';        }        $all_day_logs = $this->attendance_model->get_emp_all_logs_by_day($input_data['user_id'], $created_date);        $table_row = '';        $over_all_time = "";        if (count($all_day_logs) > 0) {            foreach ($all_day_logs as $key1 => $log_data) {                $total_time[] = $this->time_difference($log_data['out_time'], $log_data['in_time']);            }            $over_all_time = $this->round_hours($this->sum_multi_time($total_time));        }        if (!empty($all_day_logs)) {            foreach ($all_day_logs as $key => $value) {                $s_no = $key + 1;                $time1 = $value['in_time'];                $time2 = $value['out_time'];                $array1 = explode(':', $time1);                $array2 = explode(':', $time2);                $minutes1 = ($array1[0] * 60.0 + $array1[1]);                $minutes2 = ($array2[0] * 60.0 + $array2[1]);                if ($minutes2 <= $minutes1)                    $break_diff = $minutes1 - $minutes2;                if ($minutes2 >= $minutes1)                    $break_diff = $minutes2 - $minutes1;                $minutes = $break_diff;                $val_count = count($all_day_logs);                $total_duration = floor($minutes / 60) . ':' . ($minutes - floor($minutes / 60) * 60);                $table_row .= '<tr>                                    <td class="center holiday_class">' . $s_no . '</td>                                    <td class="center holiday_class">                                       ' . $value['in_time'] . '                                    </td>                                    <td class="center holiday_class"> ' . $value['out_time'] . '</td>                                    <td class="center holiday_class">' . $total_duration . '                                    </td>                                </tr>';                if ($val_count == $s_no) {                    $table_row .='<tr>                                    <td class="center "> </td>                                    <td class="center "> </td>                                    <td class="center "><b>Total Break Duration</b></td>                                    <td class="center ">' . $over_all_time . '                                    </td>                                </tr>';                    $table_row .='<tr>                                    <td class="center "> </td>                                    <td class="center "> </td>                                    <td class="center "><b>Over All Duration</b></td>                                    <td class="center ">' . $totalduration . '                                    </td>                                </tr>';                }            }        } else {            $table_row .= '<tr><td class="center holiday_class" colspan="4" align=center>No logs found...!</td>                                  </tr>';        }        echo $table_row;    }    function overtime_report() {        $this->load->model('attendance_model');        $this->load->model('masters/users_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/user_shift_model');        $this->load->library('session_view');        $result = array();        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        if ($this->input->post("go")) {            //print_r($this->input->post());            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'overtime_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/overtime_reports/");        }        else {            $filter = array();            $filter = $this->session_view->get_session('reports', 'overtime_reports');            if (isset($filter) && !empty($filter)) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                //echo $data["month_starting_date"];                if (date('d') > $data["month_starting_date"])                    $month = date('m') - 1;                else                    $month = date('m') - 2;                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                $user_type = 2;                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'overtime_reports', $filter);            }        }        //$result["total_rows"] = $data["no_of_users"][0]['count'];        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/overtime_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $result["total_rows"] = count($data["no_of_users"]);        //$this->pagination->initialize($result);        //$this->pagination->initialize($result);        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);        //	echo $page;        //print_r($filter);        //exit;        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $day_value = "01-" . $filter['month'] . "-" . $filter['year'];                $salary = $this->user_salary_model->get_user_salary_by_user_id($user["id"], $day_value);                $shift = $this->user_shift_model->get_user_current_shift_by_user_id($user["id"], $day_value);                //if(isset($salary)&& !empty($salary) && isset($shift) && !empty($shift)){                $att = $leave = $holiday = $salary = $salary_group = $available = $shift = array();                $att = $this->attendance_model->get_attendance_by_between_dates($user["id"], $start_date, $end_date);                $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user["id"], $start_date, $end_date);                $holiday = $this->holidays_model->get_holidays_by_between_dates($user["id"], $start_date, $end_date, $user["dept"]);                $available = $this->available_leaves_model->get_user_leaves_by_user_id($user["id"]);                if (isset($salary) && !empty($salary)) {                    $salary_group = $this->salary_group_model->get_salary_group_split_by_salary_group_id($salary[0]["salary_group"]);                }                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["salary_group"][] = $salary_group;                $data["attendance"][] = $att;                $data["leave"][] = $leave;                $data["available"][] = $available;                /* }                  else                  {                  unset($user);                  } */            }        }        $data["links"] = $this->pagination->create_links();        $data["start_page"] = $page;        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        $data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        $this->load->model('attendance/attendance_model');        $post_data = $this->input->post();        $start_date = date('Y-m-01');        $end_date = date('Y-m-d');        if ($post_data != "") {            if ($post_data['start_date'] != "") {                $start_date = date('Y-m-d', strtotime($post_data['start_date']));            }            if ($post_data['end_date'] != "") {                $end_date = date('Y-m-d', strtotime($post_data['end_date']));            }        }        $data['over_reports'] = $this->attendance_model->get_over_time_reports($start_date, $end_date);        $data['start_date'] = $start_date;        $data['end_date'] = $end_date;        //$this->pre_print->viewExit($data);        //echo "<pre>";print_r($data['over_reports']);exit;        $this->template->write_view('content', 'attendance/overtime_report_new', $data);        $this->template->render();    }    function monthly_reports() {        // echo "1";exit;        $this->load->model('attendance_model');        $this->load->model('masters/users_model');        $this->load->model('masters/available_leaves_model');        $this->load->model('leave_model');        $this->load->model('masters/department_model');        $this->load->model('masters/designation_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/options_model');        $this->load->model('masters/holidays_model');        $this->load->model('masters/user_salary_model');        $this->load->model('masters/salary_group_model');        $this->load->model('masters/shift_model');        $this->load->model('masters/user_shift_model');        $this->load->library('session_view');        $result = array();        $data["default_number_of_records"] = $this->options_model->get_option_by_name('default_number_of_records');        $options = array('company_name', 'place', 'district', 'min_ot_hours', 'ot_threshold', 'ot_division', 'saturday_holiday', 'overtime_wages', 'week_starting_day', 'month_starting_date');        $settings = $this->options_model->get_option_by_name($options);        if (isset($settings) && !empty($settings)) {            foreach ($settings as $set) {                $data[$set["key"]] = $set["value"];            }        }        if ($this->input->post("go")) {            //print_r($this->input->post());            $filter = $this->input->post();            if (isset($filter["go"]))                unset($filter["go"]);            $year = $filter["year"];            $month = $filter["month"];            $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);            $start_date = $filter["start_date"];            $end_date = $filter["end_date"];            $user_type = $filter["user_type"];            $this->users_model->create_view_for_normal_users($end_date);            $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            $this->session_view->add_session('reports', 'overtime_reports', $filter);            redirect($this->config->item('base_url') . "attendance/reports/overtime_reports/");        }        else {            $filter = array();            $filter = $this->session_view->get_session('reports', 'overtime_reports');            if (isset($filter) && !empty($filter)) {                $year = $filter["year"];                $month = $filter["month"];                $user_type = $filter["user_type"];                $start_date = $filter["start_date"];                $end_date = $filter["end_date"];                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);            } else {                $year = date('Y');                //echo $data["month_starting_date"];                if (date('d') > $data["month_starting_date"])                    $month = date('m') - 1;                else                    $month = date('m') - 2;                $days = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $day = $data["month_starting_date"];                if ($data["month_starting_date"] == 1) {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . $month . "-" . $days;                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        //$end_date = ($year+1)."-1-".$days;                        $end_date = ($year) . "-12-31";                    }                } else {                    if ($month != 12) {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = $year . "-" . ($month + 1) . "-" . ($day - 1);                    } else {                        $start_date = $year . "-" . $month . "-" . $day;                        $end_date = ($year + 1) . "-1-" . ($day - 1);                    }                }                $this->users_model->create_view_for_normal_users($end_date);                $data["no_of_users"] = $this->users_model->get_users_count_with_shift_salary(null, 1, null, $end_date, $start_date);                $user_type = 2;                $filter = array("year" => $year, 'month' => $month, "user_type" => 2, "start_date" => $start_date, "end_date" => $end_date);                $this->session_view->add_session('reports', 'overtime_reports', $filter);            }        }        //$result["total_rows"] = $data["no_of_users"][0]['count'];        if (isset($filter["show_count"]))            $default = $filter["show_count"];        else {            if (isset($data["default_number_of_records"]) && !empty($data["default_number_of_records"]))                $default = $data["default_number_of_records"][0]["value"];            else                $default = 10;        }        $result["base_url"] = $this->config->item('base_url') . "attendance/reports/overtime_reports/";        $result["per_page"] = $default;        $result["num_links"] = 3;        $result["uri_segment"] = 4;        $result['full_tag_open'] = '<ul class="tsc_pagination tsc_paginationA tsc_paginationA01">';        $result['full_tag_close'] = '</ul>';        $result['prev_link'] = '&lt;';        $result['prev_tag_open'] = '<li>';        $result['prev_tag_close'] = '</li>';        $result['next_link'] = '&gt;';        $result['next_tag_open'] = '<li>';        $result['next_tag_close'] = '</li>';        $result['cur_tag_open'] = '<li class="current"><a href="#">';        $result['cur_tag_close'] = '</a></li>';        $result['num_tag_open'] = '<li>';        $result['num_tag_close'] = '</li>';        $result['first_tag_open'] = '<li>';        $result['first_tag_close'] = '</li>';        $result['last_tag_open'] = '<li>';        $result['last_tag_close'] = '</li>';        $result['first_link'] = '&lt;&lt;';        $result['last_link'] = '&gt;&gt;';        $result["total_rows"] = count($data["no_of_users"]);        //$this->pagination->initialize($result);        //$this->pagination->initialize($result);        $page = ($this->uri->segment(4)) ? $this->uri->segment(4) : 0;        $data["count"] = $default;        $this->users_model->create_view_for_normal_users($end_date);        if ($default == "all")            $data['users'] = $this->users_model->get_users_count_with_shift_salary($filter, 1, null, $end_date, $start_date);        else            $users = $this->users_model->get_users_with_shift_salary($filter, 1, null, $end_date, $start_date, $result["per_page"], $page);        //$users = $this->users_model->get_users_with_shift_salary($filter,1,null,$start_date,$end_date,$result["per_page"],$page);        //  echo $page;        //print_r($filter);        //exit;        if (isset($users) && !empty($users)) {            foreach ($users as $user) {                $day_value = "01-" . $filter['month'] . "-" . $filter['year'];                $salary = $this->user_salary_model->get_user_salary_by_user_id($user["id"], $day_value);                $shift = $this->user_shift_model->get_user_current_shift_by_user_id($user["id"], $day_value);                //if(isset($salary)&& !empty($salary) && isset($shift) && !empty($shift)){                $att = $leave = $holiday = $salary = $salary_group = $available = $shift = array();                $att = $this->attendance_model->get_attendance_by_between_dates($user["id"], $start_date, $end_date);                $leave = $this->leave_model->get_approved_user_leaves_by_between_dates($user["id"], $start_date, $end_date);                $holiday = $this->holidays_model->get_holidays_by_between_dates($user["id"], $start_date, $end_date, $user["dept"]);                $available = $this->available_leaves_model->get_user_leaves_by_user_id($user["id"]);                if (isset($salary) && !empty($salary)) {                    $salary_group = $this->salary_group_model->get_salary_group_split_by_salary_group_id($salary[0]["salary_group"]);                }                $data["users"][] = $user;                $data["holiday"][] = $holiday;                $data["salary_group"][] = $salary_group;                $data["attendance"][] = $att;                $data["leave"][] = $leave;                $data["available"][] = $available;                /* }                  else                  {                  unset($user);                  } */            }        }        $data["links"] = $this->pagination->create_links();        $data["start_page"] = $page;        $data["threshold"] = $this->options_model->get_options_by_type('attendance_threshold');        $data["overtimewages"] = $this->options_model->get_options_by_type('overtime_wages');        $data["departments"] = $this->department_model->get_all_departments_by_status(1);        $data["designations"] = $this->designation_model->get_all_designations();        $data["shifts"] = $this->shift_model->get_all_shifts();        $data["year"] = $year;        $data["month"] = $month;        $data["start_date"] = $start_date;        $data["end_date"] = $end_date;        $data["user_type"] = $user_type;        $this->load->model('attendance/attendance_model');        $post_data = $this->input->post();        $start_date = date('Y-m-01');        $end_date = date('Y-m-d');        if ($post_data != "") {            if ($post_data['start_date'] != "") {                $start_date = date('Y-m-d', strtotime($post_data['start_date']));            }            if ($post_data['end_date'] != "") {                $end_date = date('Y-m-d', strtotime($post_data['end_date']));            }        }        // $data['over_reports']= $this->attendance_model->get_over_time_reports($start_date,$end_date);        $data['monthly_reports'] = $this->attendance_model->get_all_monthly_reports($start_date, $end_date);        $data['start_date'] = $start_date;        $data['end_date'] = $end_date;        //$this->pre_print->viewExit($data);        //echo "<pre>";print_r($data['monthly_reports']);exit;        $this->template->write_view('content', 'attendance/monthly_report_new', $data);        $this->template->render();    }    function sum_multi_time($times) {        $seconds = 0;        if ($times) {            foreach ($times as $time) {                list($hour, $minute, $second) = explode(':', $time);                $seconds += $hour * 3600;                $seconds += $minute * 60;                $seconds += $second;            }        }        $hours = floor($seconds / 3600);        $seconds -= $hours * 3600;        $minutes = floor($seconds / 60);        $seconds -= $minutes * 60;        //  return "{$hours}:{$minutes}:{$seconds}";        return sprintf('%02d:%02d:%02d', $hours, $minutes, $seconds); // Thanks to Patrick    }    function time_difference($in_time, $out_time) {        $time1 = new DateTime($in_time);        $time2 = new DateTime($out_time);        $inter = $time2->diff($time1);        $hours = $inter->h;        if ($inter->h < 10) {            $hours = "0" . $inter->h;        }        $mins = $inter->i;        if ($inter->i < 10) {            $mins = "0" . $inter->i;        }        $sec = $inter->s;        if ($inter->s < 10) {            $sec = "0" . $inter->s;        }        return $hours . ":" . $mins . ":" . $sec;    }}?>
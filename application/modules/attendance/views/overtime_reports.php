<?php $theme_path = $this->config->item('theme_locations') . $this->config->item('active_template'); ?><script src="<?= $theme_path; ?>/js/jquery-1.8.2.js"></script><script src="<?= $theme_path; ?>/js/jquery-ui-my-1.10.3.min.js"></script><script type='text/javascript' src='<?= $theme_path; ?>/js/auto_com/jquery.autocomplete.js'></script><link rel="stylesheet" type="text/css" href="<?= $theme_path; ?>/js/auto_com/jquery.autocomplete.css" /><link rel="stylesheet" href="<?= $theme_path; ?>/css/bootstrap-multiselect.css" type="text/css"/><script type="text/javascript" src="<?= $theme_path; ?>/js/bootstrap-multiselect.js"></script><script type="text/javascript" src="<?= $theme_path ?>/js/reports.js"></script><link href="<?= $theme_path ?>/css/print_page.css" rel="stylesheet" ><style type="text/css">    @media print    {        .contentinner        {            -webkit-print-color-adjust: exact;        }    }    .headerpanel    {        width:100%;    }    [class^="icon-"],[class*=" icon-"]{display:inline-block;width:12px;height:12px;}</style><?php$this->load->model('admin/admin_model');$data['company_details'] = $this->admin_model->get_company_details();?><div class="print_header">    <table width="100%">        <tr>            <td width="15%" style="vertical-align:middle;">                <div class="print_header_logo" ><img src="<?= $theme_path; ?>/images/logo.png" /></div>            </td>            <td width="85%">                <div class="print_header_tit" >                    <h3>The Total</h3>                    <p>                        <?= $data['company_details'][0]['address1'] ?>,                        <?= $data['company_details'][0]['address2'] ?>,                    </p>                    <p></p>                    <p><?= $data['company_details'][0]['city'] ?>-                        <?= $data['company_details'][0]['pin'] ?>,                        <?= $data['company_details'][0]['state'] ?></p>                    <p></p>                    <p>Ph:                        <?= $data['company_details'][0]['phone_no'] ?>, Email:                        <?= $data['company_details'][0]['email'] ?>                    </p>                </div>            </td>        </tr>    </table></div><div class="mainpanel">    <?php    $filter = array();    $filter = $this->session_view->get_session(null, null);    $attributes = array('class' => 'stdform editprofileform', 'method' => 'post');    echo form_open('', $attributes);    $s = $start_page + 1;    ?>    <div class="media mt--20">        <h4>Overtime Reports</h4>    </div></div><div class="contentpanel">    <div class="panel-body mt-top5">        <table class="table responsive_table">            <thead>                <tr>                    <th>Department &nbsp; <?php                        $default = '';                        $options = array();                        if (isset($filter["department"]) && !empty($filter["department"])) {                            $default = $filter["department"];                        }                        if (isset($departments) && !empty($departments)) {                            foreach ($departments as $dept) {                                $options[$dept["dept_id"]] = $dept["dept_name"];                            }                        }                        echo form_multiselect('department[]', $options, $default, 'class="multiselect" id="department_select"');                        ?></th>                    <th id ="designation">Designation &nbsp;<?php                        $default = '';                        $options = array();                        if (isset($filter["designation"]) && !empty($filter["designation"])) {                            $default = $filter["designation"];                        }                        if (isset($designations) && !empty($designations)) {                            foreach ($designations as $des) {                                $options[$des["id"]] = $des["name"];                            }                        }                        echo form_multiselect('designation[]', $options, $default, 'class="multiselect" id="designation_select"');                        ?></th>                    <th >User Type &nbsp; <?php                        $options = array('' => "Select", 1 => "Weekly", 2 => "Monthly");                        $default = $user_type;                        echo form_dropdown('user_type', $options, $default, 'id="user_type" class="uniformselect user_type"');                        ?>                    </th>                    <th>Year &nbsp;<?php                        $options = array('' => 'Select Year');                        for ($i = 2000; $i <= date('Y'); $i++) {                            $options[$i] = $i;                        }                        echo form_dropdown('year', $options, $year, 'id="year_select" class="input-small"');                        ?></th>                    <th>Month &nbsp;<?php                        $month_arr = array("Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec");                        $options = array('' => 'Select Month');                        $default = $month;                        if ($year == date('Y')) {                            if ($user_type == 1) {                                for ($i = 0; $i < date('m'); $i++)                                    $options[$i + 1] = $month_arr[$i];                            } else {                                for ($i = 0; $i < date('m') - 1; $i++) {                                    if ($i == date('m') - 2) {                                        if (date('d') > $month_starting_date)                                            $options[$i + 1] = $month_arr[$i];                                    } else                                        $options[$i + 1] = $month_arr[$i];                                }                            }                        }                        else {                            for ($i = 0; $i < 12; $i++) {                                $options[$i + 1] = $month_arr[$i];                            }                        }                        echo form_dropdown('month', $options, $default, 'id="month_select" class="input-small"');                        ?></th>            <input type="hidden" name="start_date" id="start_date" value="<?= $start_date ?>">            <input type="hidden" name="end_date" id="end_date" value="<?= $end_date ?>">            <th id="date_th">Week &nbsp;                <?php                $filter_start = $start_date;                $filter_end = $end_date;                $default = "";                if (isset($filter['date']))                    $default = $filter["date"];                //echo $default;                $starting_day = array();                $day = $month_starting_date;                $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month, $year);                $start_d = $year . "-" . $month . "-1";                $end = ($year) . "-" . $month . "-" . ($days_in_month);                $start_date = date('d-m-Y', strtotime($start_d));                $end_date = date('d-m-Y', strtotime($end));                $std_dt1 = $end_date . " 00:00:00";                $exclude_date1 = new DateTime($std_dt1 . ' +1 day');                $e_date1 = $exclude_date1->format('d-m-Y');                $start = new DateTime($start_date . ' 00:00:00');                //Create a DateTime representation of the last day of the current month based off of "now"                $end = new DateTime($e_date1 . ' 00:00:00');                //Define our interval (1 Day)                $interval = new DateInterval('P1D');                //Setup a DatePeriod instance to iterate between the start and end date by the interval                $period = new DatePeriod($start, $interval, $end);                //Iterate over the DatePeriod instance                $sunday = array();                foreach ($period as $date) {                    //Make sure the day displayed is ONLY sunday.                    if ($date->format('w') == $week_starting_day) {                        $starting_day[] = $date->format('d-m-Y') . PHP_EOL;                    }                }                $options = array();                if (isset($starting_day) && !empty($starting_day)) {                    if ($year == date('Y')) {                        if ($month == date('m')) {                            //echo date('m')-1;                            foreach ($starting_day as $st) {                                if (strtotime($st) < strtotime(date("d-m-Y"))) {                                    $next_date1 = date("Y-m-d", strtotime($st)) . " 00:00:00";                                    $next_date2 = new DateTime($next_date1 . ' +6 day');                                    if ($next_date2->format('d') < date('d'))                                        $options[date('d', strtotime($st))] = date('d-M', strtotime($st));                                }                            }                        }                        else {                            foreach ($starting_day as $st) {                                if (strtotime($st) < strtotime(date("d-m-Y"))) {                                    $options[ltrim(date('d', strtotime($st)), 0)] = date('d-M', strtotime($st));                                }                            }                        }                    } else {                        foreach ($starting_day as $st) {                            $options[date('d', strtotime($st))] = date('d-M', strtotime($st));                        }                    }                }                echo form_multiselect('date[]', $options, $default, 'id="date_select" class="multiselect"');                ?>            <th class="res_div"><input type="submit" name="go" value="  Go  " id="go" class="btn btn-info border4"></th>            <th>                <a href="javascript:void(0)" style="float:right" title="Reset"><input type="button" class="btn btn-danger border4 reset" value="Reset"></a>            </th>            </tr></thead>        </table>        <?php        $options = array();        $this->load->model('options_model');        $record = array(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200);        $closest = $this->options_model->getClosest(count($no_of_users), $record);        //echo $closest;        for ($k = 10; $k <= $closest;) {            $options[$k] = $k;            if ($k < 100)                $k = $k + 10;            else                $k = $k + 20;        }        if (count($no_of_users) >= 1000) {            $count_start = count($no_of_users) / 100;            if ($count_start >= 10) {                for ($c = 4; $c < $count_start;) {                    $options[$c * 100] = $c * 100;                    $c+=2;                }            }        }        if (!in_array($count, $options)) {            $max = $this->options_model->getClosest($count, $options);            if ($max < count($no_of_users))                $count = "all";            else                $count = $max;        }        $options["all"] = "All";        echo "<span class='hide_show'>Show " . form_dropdown('record_show', $options, $count, "id='count_change'") . " entries</span>";        ?>        <div class="button_right_align" style="float:right;">            NA - Not Applicable, &nbsp;I - Inactive Status        </div>        <table class="table table-bordered wage_res"  >            <tr>                <td>Name of the Company : <strong><?php if (isset($company_name) && $company_name != "") echo $company_name; ?></strong></td>                <td>Place : <strong><?php if (isset($place) && $place != "") echo $place; ?></strong></td>                <td>District : <strong><?php if (isset($district) && $district != "") echo $district; ?></strong></td>                <td>Holidays : <strong>Sunday</strong></td>                <td colspan="4">Month of <strong><?php                        $month_arr = array("Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec");                        echo $month_arr[$month - 1] . " " . $year;                        ?></strong></td>            </tr>        </table>        <br>        <?php        if (isset($saturday_holiday) && $saturday_holiday == 0)            $week_days = 6;        else            $week_days = 5;        $this->load->model("attendance_model");        $month_start = new DateTime(date('d-m-Y', strtotime($filter_start)) . " 00:00:00");        $month_end = new DateTime(date('d-m-Y', strtotime($filter_end)) . " 00:00:00");        $s_date = date('d-m-Y', strtotime($filter_start));        $std_dt = $filter_end . " 00:00:00";        $exclude_date = new DateTime($std_dt . ' +1 day');        $e_date = $exclude_date->format('d-m-Y');        $start = new DateTime($s_date . ' 00:00:00');        //Create a DateTime representation of the last day of the current month based off of "now"        $end = new DateTime($e_date . ' 00:00:00');        //Define our interval (1 Day)        $interval = new DateInterval('P1D');        //Setup a DatePeriod instance to iterate between the start and end date by the interval        $period = new DatePeriod($start, $interval, $end);        //Iterate over the DatePeriod instance        $sunday = array();        foreach ($period as $date) {            //Make sure the day displayed is ONLY sunday.            $days_array[] = $date->format('d-m-Y');        }        $proceed = 0;        //Define our interval (1 Day)        $interval = new DateInterval('P1D');        //Setup a DatePeriod instance to iterate between the start and end date by the interval        $period = new DatePeriod($month_start, $interval, $month_end);        //Iterate over the DatePeriod instance        $sunday = array();        foreach ($period as $date) {            //Make sure the day displayed is ONLY sunday.            if ($date->format('w') == 0) {                $sunday[] = $date->format('d-m-Y') . PHP_EOL;            }            //Checking saturday is a  Saturday holiday            if (isset($saturday_holiday) && $saturday_holiday == 1) {                if ($date->format('w') == 6) {                    $sunday[] = $date->format('d-m-Y') . PHP_EOL;                }            }        }        ?>        <div class="tblscroll">            <table class="table table-bordered print_table2 print_border" style="font-size:10px;">                <thead>                    <tr>                        <th rowspan="2">S.No</th>                        <th rowspan="2">Employee ID</th>                        <th rowspan="2">Name of the Worker</th>                        <th rowspan="2">Department</th>                        <th rowspan="2">Designation</th>                        <th style="text-align: center;" colspan="<?= count($days_array) ?>">Wages Period / Hours of Over Time</th>                        <th rowspan="2">Total Hour of overtime<br>work perfomed</th>                      <!--  <th rowspan="2">Normal Rate/ Hour(Rs)</th>                        <th rowspan="2">Wages for over time<br>work (Double)</th>                        <?php if ($proceed == 0) { ?>                            <th rowspan="2">Net Amount Paid</th>                            <th rowspan="2">Signature of the employee</th>                        <?php } ?>-->                    </tr>                    </tr>                    <tr>                        <?php for ($d = 0; $d <= count($days_array) - 1; $d++) { ?>                            <th><?php                                $current_day = explode("-", $days_array[$d]);                                echo $current_day[0];                                ?></th>                        <?php } ?>                    </tr>                </thead>                <tbody>                    <?php//print_r($attendance);                    if (isset($attendance) && !empty($attendance))                        $result = array_filter($attendance);//if(isset($result)&& !empty($result)){                    if (isset($users) && !empty($users)):                        for ($k = 0; $k < count($users); $k++) {                            $no_of_ot_hours = 0;                            $comp_off_ot_hours = 0;                            $user_overtime = 0;                            $att = array(0);                            $half_dedu = 0;                            $full_dedu = 0;                            $ot_all = 0;                            $user_salary = array();                            $ot_user_salary = array();                            if (isset($attendance[$k]) && !empty($attendance[$k])) {                                foreach ($attendance[$k] as $am) {                                    if ($am["in"] != "00:00:00")                                        $att[$am["attendance_date"]] = $am;                                }                            }                            if (isset($leave[$k]) && !empty($leave[$k])) {                                foreach ($leave[$k] as $lval) {                                    if ($lval["l_from"] == $lval["l_to"])                                        $leave_arr[$lval["l_from"]] = $lval;                                    else if ($lval["type"] == "permission") {                                        $leave_arr[$lval["l_from"]] = $lval;                                    } else {                                        $start = $lval["l_from"];                                        $std_dt = date('Y-m-d', strtotime($lval["l_to"]));                                        $exclude_date = new DateTime($std_dt . ' +1 day');                                        $end = $exclude_date->format('d-m-Y');                                        $start = new DateTime($std_dt . ' 00:00:00');                                        //Create a DateTime representation of the last day of the current month based off of "now"                                        $end = new DateTime($end . ' 00:00:00');                                        //Define our interval (1 Day)                                        $interval = new DateInterval('P1D');                                        //Setup a DatePeriod instance to iterate between the start and end date by the interval                                        $period = new DatePeriod($start, $interval, $end);                                        //Iterate over the DatePeriod instance                                        $sunday = array();                                        foreach ($period as $date) {                                            //Make sure the day displayed is ONLY sunday.                                            $leave_arr[$date->format('d-m-Y')] = $lval;                                        }                                    }                                }                            }                            $holi_arr = array();                            if (isset($holiday[$k]) && !empty($holiday[$k])) {                                foreach ($holiday[$k] as $hval) {                                    if ($hval["holiday_from"] == $hval["holiday_to"]) {                                        //$holi_arr[$hval["h_from"]] = $hval;                                        $hol_val = date('l', strtotime($hval["holiday_from"]));                                        if ($hol_val == "Sunday" || $hol_val == "Saturday") {                                            if (isset($saturday_holiday) && $saturday_holiday != 1)                                                $holi_arr[$hval["h_from"]] = $hval;                                        } else                                            $holi_arr[$hval["h_from"]] = $hval;                                    }                                    else {                                        $start = $hval["h_from"];                                        $std_dt = date('Y-m-d', strtotime($hval["h_to"]));                                        $exclude_date = new DateTime($std_dt . ' +1 day');                                        $end = $exclude_date->format('d-m-Y');                                        $start = new DateTime($std_dt . ' 00:00:00');                                        //Create a DateTime representation of the last day of the current month based off of "now"                                        $end = new DateTime($end . ' 00:00:00');                                        //Define our interval (1 Day)                                        $interval = new DateInterval('P1D');                                        //Setup a DatePeriod instance to iterate between the start and end date by the interval                                        $period = new DatePeriod($start, $interval, $end);                                        //Iterate over the DatePeriod instance                                        $sunday = array();                                        foreach ($period as $date) {                                            $hol_val = date('l', strtotime($date->format('d-m-Y')));                                            if ($hol_val == "Sunday" || $hol_val == "Saturday") {                                                if (isset($saturday_holiday) && $saturday_holiday != 1)                                                    $holi_arr[$hval["h_from"]] = $hval;                                            } else                                                $holi_arr[$hval["h_from"]] = $hval;                                            //Make sure the day displayed is ONLY sunday.                                            $holi_arr[$date->format('d-m-Y')] = $hval;                                        }                                    }                                }                            }                            $total_ot_earned = 0;                            $total_compoff_ot_earned = 0;                            $this->load->model('masters/shift_model');                            $this->load->model('masters/user_shift_model');                            $this->load->model('masters/salary_group_model');                                                       $key_id = array("EMP-1", "EMP-2", "EMP-3", "EMP-4","EMP-15");if (!in_array($users[$k]['employee_id'], $key_id)) {  ?>                                                            <tr>                                <td><?= $s++ ?></td>                                <td><?= $users[$k]['employee_id'] ?></td>                                <td><?= $users[$k]['first_name'] ?></td>                                <td><?= ucwords($users[$k]['dept_name']) ?></td>                                <td><?= ucwords($users[$k]['des_name']) ?></td>                                <?php                                for ($n = 0; $n <= count($days_array) - 1; $n++) {                                    $current_day = explode("-", $days_array[$n]);                                    $working_days = count($days_array) - (count($sunday) + count($holi_arr));                                    $day_value = $days_array[$n];                                    $current = $current_day[0];                                    if (isset($users[$k]["dol"]) && strtotime($day_value) > strtotime($users[$k]["dol"]))                                        echo "<td class='center'>I</td>";                                    else {                                        $hr_ot_salary = 0;                                        $overtimestart = 0;                                        $overtimend = 0;                                        $start_time = 0;                                        $regular_time = 0;                                        $regular_time_val = 0;                                        $breaktimediff = 0;                                        $date_end = 0;                                        $end_time = 0;                                        $current_hr_salary = 0;                                        $leave_taken = 0;                                        $current_shift_id = $this->user_shift_model->get_user_current_shift_by_user_id($users[$k]["id"], $day_value);                                        //print_r($current_shift_id);                                        $shift = $this->shift_model->get_shift_details_by_shift_id($current_shift_id[0]["shift_id"]);                                        $salary = $this->user_salary_model->get_user_salary_by_user_id($users[$k]["id"], $day_value);                                        //echo $this->db->last_query();                                        $salary_group = $this->salary_group_model->get_salary_group_split_by_salary_group_id($salary[0]["salary_group"]);                                        if (isset($shift) && !empty($shift)) {                                            foreach ($shift as $sh) {                                                if ($sh["type"] == "overtimestart") {                                                    $overtimestart = $sh["from_time"];                                                    $overtimeend = $sh["to_time"];                                                } else {                                                    if ($sh["type"] == "regular") {                                                        $reg_st = explode(':', $sh["from_time"]);                                                        $reg_et = explode(':', $sh["to_time"]);                                                        if ($reg_st[0] > $reg_et[0]) {                                                            $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                            $date_start = new DateTime(date('d-m-Y') . " " . $sh["from_time"]);                                                            $date_end = new DateTime($next_day->format('d-m-Y') . " " . $sh["to_time"]);                                                        } else {                                                            $date_start = new DateTime(date('d-m-Y') . " " . $sh["from_time"]);                                                            $date_end = new DateTime(date('d-m-Y') . " " . $sh["to_time"]);                                                        }                                                        $start_time = $sh["from_time"];                                                        $end_time = $sh["to_time"];                                                        $regular_time = dateTimeDiff($date_start, $date_end);                                                    } else {                                                        $reg_st = explode(':', $sh["from_time"]);                                                        $reg_et = explode(':', $sh["to_time"]);                                                        if ($reg_st[0] > $reg_et[0]) {                                                            $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                            $break_st = new DateTime(date('d-m-Y') . " " . $sh["from_time"]);                                                            $break_end = new DateTime($next_day->format('d-m-Y') . " " . $sh["to_time"]);                                                        } else {                                                            $break_st = new DateTime(date('d-m-Y') . " " . $sh["from_time"]);                                                            $break_end = new DateTime(date('d-m-Y') . " " . $sh["to_time"]);                                                        }                                                        $inter = dateTimeDiff($break_st, $break_end);                                                        if ($inter->h > 0) {                                                            $breaktimediff = round($breaktimediff + ($inter->h) * 60, 2);                                                        }                                                        if ($inter->i > 0) {                                                            $breaktimediff = round($breaktimediff + ($inter->i), 2);                                                        }                                                        if ($interval->s > 0) {                                                            $breaktimediff = round($breaktimediff + ($interval->s / 60), 2);                                                        }                                                    }                                                }                                            }                                            $regular_time_val = round($regular_time->h * 60 + $regular_time->i - $breaktimediff - $threshold[0]['value'], 2);                                            $res = explode(':', $start_time);                                            $shift_start_time = round($res[0] * 60 + $res[1] + $threshold[0]['value'], 2);                                            if (isset($res[2]) && $res[2] > 0)                                                $shift_start_time = round($shift_start_time + ($res[2] / 60), 2);                                            $yes = 0;                                            $total_break = 0;                                            $time_taken = 0;                                            $break = array();                                            $difference = "";                                            $permission_hrs = 0;                                            $half_day = 0;                                            $ot_value = 0;                                            $half_day_salary = 0;                                            $one_day_salary = 0;                                            $one_hr_salary = 0;                                            $current_ot_hrs = 0;                                            $current_compoff_ot_hrs = 0;                                            $full_da = 0;                                            $half_da = 0;                                            $half_all = 0;                                            $full_all = 0;                                            $one_hr_da = 0;                                            $one_hr_all = 0;                                            $overtime_break = 0;                                            //Half day,one day nad one hour  salary calculation                                            if ($salary[0]['type'] == 'weekly') {                                                $half_day_salary = round($salary[0]['basic'] / ($week_days * 2));                                                $one_day_salary = round($salary[0]['basic'] / $week_days);                                                if (isset($salary_group) && !empty($salary_group)) {                                                    foreach ($salary_group as $grp) {                                                        if ($grp['deduction'] == 1) {                                                            if ($grp['percentage'] == 1) {                                                                $half_dedu += round($grp['value'] / 100 * $half_day_salary, 2);                                                                $full_dedu += round($grp['value'] / 100 * $one_day_salary, 2);                                                            } else {                                                                $half_dedu += round(($grp['value'] * 0.5) / $week_days, 2);                                                                $full_dedu += round($grp['value'] / $week_days, 2);                                                            }                                                        }                                                    }                                                }                                                $half_da += round($salary[0]['da'] / ($week_days * 2));                                                $full_da += round($salary[0]['da'] / $week_days);                                                if (isset($salary_group) && !empty($salary_group)) {                                                    foreach ($salary_group as $grp) {                                                        if ($grp['deduction'] == 0) {                                                            if ($grp['percentage'] == 1) {                                                                $half_all += round($grp['value'] / 100 * $half_day_salary, 2);                                                                $full_all += round($grp['value'] / 100 * $one_day_salary, 2);                                                            } else {                                                                $half_all += round(($grp['value'] * 0.5) / $week_days, 2);                                                                $full_all += round($grp['value'] / $week_days, 2);                                                            }                                                        }                                                    }                                                }                                            } elseif ($salary[0]['type'] == 'monthly') {                                                $half_day_salary = round($salary[0]['basic'] / ($working_days * 2));                                                $one_day_salary = round($salary[0]['basic'] / $working_days);                                                if (isset($salary_group) && !empty($salary_group)) {                                                    foreach ($salary_group as $grp) {                                                        if ($grp['deduction'] == 1) {                                                            if ($grp['percentage'] == 1) {                                                                $half_dedu += round($grp['value'] / 100 * $half_day_salary, 2);                                                                $full_dedu += round($grp['value'] / 100 * $one_day_salary, 2);                                                            } else {                                                                $half_dedu += round(($grp['value'] * 0.5) / $working_days, 2);                                                                $full_dedu += round($grp['value'] / $working_days, 2);                                                            }                                                        }                                                    }                                                }                                                $half_da += round($salary[0]["da"] / ($working_days * 2));                                                $full_da += round($salary[0]['da'] / $working_days);                                                if (isset($salary_group) && !empty($salary_group)) {                                                    foreach ($salary_group as $grp) {                                                        $new_value = 0;                                                        if ($grp['deduction'] == 0) {                                                            if ($grp['percentage'] == 1) {                                                                $half_all += round($grp['value'] / 100 * $half_day_salary, 2);                                                                $full_all += round($grp['value'] / 100 * $one_day_salary, 2);                                                            } else {                                                                $half_all += round(($grp['value'] * 0.5) / $working_days, 2);                                                                $full_all += round($grp['value'] / $working_days, 2);                                                            }                                                        }                                                    }                                                }                                            } elseif ($salary[0]['type'] == 'daily') {                                                $half_day_salary = round($salary[0]['basic'] / 2);                                                $one_day_salary = round($salary[0]['basic'], 2);                                                if (isset($salary_group) && !empty($salary_group)) {                                                    foreach ($salary_group as $grp) {                                                        if ($grp['deduction'] == 1) {                                                            if ($grp['percentage'] == 1) {                                                                $half_dedu += round($grp['value'] / 100 * $half_day_salary, 2);                                                                $full_dedu += round($grp['value'] / 100 * $one_day_salary, 2);                                                            } else {                                                                $half_dedu += round(($grp['value'] * 0.5), 2);                                                                $full_dedu += round($grp['value'], 2);                                                            }                                                        }                                                    }                                                }                                                $half_da += round($salary[0]['da'] / 2);                                                $full_da += round($salary[0]['da'], 2);                                                if (isset($salary_group) && !empty($salary_group)) {                                                    foreach ($salary_group as $grp) {                                                        $new_value = 0;                                                        if ($grp['deduction'] == 0) {                                                            if ($grp['percentage'] == 1) {                                                                $half_all += round($grp['value'] / 100 * $half_day_salary, 2);                                                                $full_all += round($grp['value'] / 100 * $one_day_salary, 2);                                                            } else {                                                                $half_all += round(($grp['value'] * 0.5), 2);                                                                $full_all += round($grp['value'], 2);                                                            }                                                        }                                                    }                                                }                                            }                                            $one_hr_salary = round($one_day_salary / round($regular_time_val / 60), 2);                                            $one_hr_da = round($full_da / round($regular_time_val / 60), 2);                                            $one_hr_all = round($full_all / round($regular_time_val / 60), 2);                                            $current_hr_salary = round($one_hr_salary + $one_hr_da + $one_hr_all, 2);                                            $hr_ot_salary = round(($one_hr_salary + $one_hr_da + $one_hr_all) * $overtime_wages, 2);                                            if (!isset($ot_user_salary[$salary[0]["basic"]]))                                                $ot_user_salary[$salary[0]["basic"]] = $hr_ot_salary;                                            if (!isset($user_salary[$salary[0]["basic"]]))                                                $user_salary[$salary[0]["basic"]] = $current_hr_salary;                                            $sun = date('l', strtotime($day_value));                                            if (isset($att[$day_value]) && !empty($att[$day_value])) {                                                if ($att[$day_value]['in'] != NULL && $att[$day_value]['out'] != NULL) {                                                    $user_in = explode(':', $att[$day_value]['in']); // user in time                                                    $shift_start = explode(':', $start_time); // shift start time                                                    $calc = explode(':', $att[$day_value]['out']); // user out time                                                    $end = explode(':', $end_time); // shift end time                                                    $shift_start1 = date("H:i", strtotime($start_time) - 21600);                                                    $end_threshold = explode(':', $shift_start1);                                                    $start_shift = ( $shift_start[0] - 1) . ":" . $shift_start[1];                                                    $user_in_start = $user_in[0] . ":" . $user_in[1];                                                    $end_shift = ($end[0] + 1) . ":" . $end[1];                                                    $check1 = DateTime::createFromFormat('H:i', $user_in_start);                                                    $check2 = DateTime::createFromFormat('H:i', $start_shift);                                                    if ($shift_start[0] > $end_threshold[0]) {                                                        $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                        $check3 = new DateTime($next_day->format('d-m-Y') . " " . $shift_start1);                                                    } else {                                                        $check3 = DateTime::createFromFormat('H:i', $shift_start1);                                                    }                                                    if (!($check1 > $check2 && $check1 < $check3)) {                                                        //echo $day_value;                                                        unset($att[$day_value]);                                                    }                                                }                                            }                                            if (isset($att[$day_value]) && !empty($att[$day_value])) {                                                $user_in = explode(':', $att[$day_value]['in']); // user in time                                                $shift_start = explode(':', $start_time); // shift start time                                                $calc = explode(':', $att[$day_value]['out']); // user out time                                                $end = explode(':', $end_time); // shift end time                                                //print_r($calc);                                                //echo $att[$day_value]["in"]."shift time".$start_time." <br>";                                                $in_start = new DateTime(date('Y-m-d') . $att[$day_value]['in']);                                                if ($calc[0] < $end[0]) {                                                    if ($user_in[0] > $calc[0]) {                                                        $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                        $in_end = new DateTime($next_day->format('d-m-Y') . " " . $att[$day_value]['out']);                                                    } else {                                                        $in_end = new DateTime(date('Y-m-d') . $att[$day_value]['out']);                                                    }                                                } elseif ($calc[0] > $end[0]) {                                                    //echo $end_time;                                                    if ($user_in[0] > $calc[0]) {                                                        $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                        $in_end = new DateTime($next_day->format('d-m-Y') . " " . $end_time);                                                    } else {                                                        $in_end = new DateTime(date('Y-m-d') . $end_time);                                                    }                                                } elseif ($calc[0] == $end[0] && $calc[1] > $end[1]) {                                                    if ($user_in[0] > $calc[0]) {                                                        $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                        $in_end = new DateTime($next_day->format('d-m-Y') . " " . $end_time);                                                    } else {                                                        $in_end = new DateTime(date('Y-m-d') . $end_time);                                                    }                                                } else {                                                    if ($user_in[0] > $calc[0]) {                                                        $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                        $in_end = new DateTime($next_day->format('d-m-Y') . " " . $end_time);                                                    } else {                                                        $in_end = new DateTime(date('Y-m-d') . $end_time);                                                    }                                                }                                                $in_interval = dateTimeDiff($in_start, $in_end);                                                $break = $this->attendance_model->get_break_details_by_attendance_id($att[$day_value]["id"]);                                                if (isset($break) && !empty($break)) {                                                    foreach ($break as $br) {                                                        if ($br["in_time"] != "00:00:00") {                                                            $reg_st = explode(':', $br["in_time"]);                                                            $reg_et = explode(':', $br["out_time"]);                                                            if ($reg_st[0] > $reg_et[0]) {                                                                $next_day = new DateTime(date('d-m-Y H:i:s') . ' + 1 day');                                                                $break1 = date('Y-m-d') . " " . $br["in_time"];                                                                $break2 = $next_day->format('d-m-Y') . " " . $br["out_time"];                                                            } else {                                                                $break1 = date('Y-m-d') . " " . $br["in_time"];                                                                $break2 = date('Y-m-d') . " " . $br["out_time"];                                                            }                                                            $break1_date = new DateTime($break1);                                                            $break2_date = new DateTime($break2);                                                            $break_interval = dateTimeDiff($break1_date, $break2_date);                                                            if ($current_shift_id[0]['ot_applicable'] == 1) {                                                                if ($overtimestart != 0) {                                                                    $ot_br_start = strtotime($break1);                                                                    $ot_br_end = strtotime($break2);                                                                    $ot_start1 = date('d-m-Y') . " " . $overtimestart;                                                                    $ot_end1 = date('d-m-Y') . " " . $overtimeend;                                                                    if (strtotime($ot_end1) <= strtotime($ot_start1)) {                                                                        $exclude_date = new DateTime($ot_end1 . ' +1 day');                                                                        $ot_end1 = $exclude_date->format('d-m-Y') . " " . $overtimeend;                                                                    }                                                                    //echo $break1;                                                                    if ($ot_br_start >= strtotime($ot_start1)) {                                                                        if ($ot_br_end <= strtotime($ot_end1))                                                                            $overtime_break = round($overtime_break + $break_interval->h * 60 + $break_interval->i + ($break_interval->s / 60), 2);                                                                        else {                                                                            $date12 = new DateTime($ot_end1);                                                                            $ot_br_interval = dateTimeDiff($break1_date, $date12);                                                                            $overtime_break = round($overtime_break + $ot_br_interval->h * 60 + $ot_br_interval->i + ($ot_br_interval->s / 60), 2);                                                                        }                                                                    }                                                                }                                                            }                                                            $total_break = $total_break + $break_interval->i;                                                            if ($break_interval->h > 0)                                                                $total_break = round($total_break + $break_interval->h * 60, 2);                                                            if ($break_interval->s > 0)                                                                $total_break = round($total_break + ($break_interval->s / 60), 2);                                                        }                                                    }                                                }                                                $time_taken = round($in_interval->h * 60 + $in_interval->i - $total_break, 2);                                                if ($in_interval->s > 0)                                                    $time_taken = round($time_taken + ($in_interval->s / 60), 2);                                                if ($current_shift_id[0]['ot_applicable'] == 1) {                                                    if ($overtimestart != 0) {                                                        $over1 = explode(':', $overtimestart);                                                        $over2 = explode(':', $overtimeend);                                                        $att_out = explode(':', $att[$day_value]["out"]);                                                        $ot_start = $att[$day_value]["attendance_date"] . " " . $overtimestart;                                                        $ot_end = $att[$day_value]["attendance_date"] . " " . $overtimeend;                                                        if (strtotime($ot_end) <= strtotime($ot_start)) {                                                            $exclude_date = new DateTime($ot_end . ' +1 day');                                                            $ot_end = $exclude_date->format('d-m-Y') . " " . $overtimeend;                                                        }                                                        $in_start = $att[$day_value]["attendance_date"] . " " . $att[$day_value]["in"];                                                        $out_end = $att[$day_value]["attendance_date"] . " " . $att[$day_value]["out"];                                                        if (strtotime($out_end) <= strtotime($in_start)) {                                                            $exclude_date = new DateTime($out_end . ' +1 day');                                                            $out_end = $exclude_date->format('d-m-Y') . " " . $att[$day_value]["out"];                                                        }                                                        if (strtotime($ot_start) < strtotime($in_start)) {                                                            $ot_start = $in_start;                                                        }                                                        $difference = "";                                                        if (strtotime($ot_start) < strtotime($out_end)) {                                                            if (strtotime($ot_end) > strtotime($out_end)) {                                                                $ot_start = new DateTime($ot_start);                                                                $out_end = new DateTime($out_end);                                                                $difference = dateTimeDiff($ot_start, $out_end);                                                            } else if (strtotime($ot_end) <= strtotime($out_end)) {                                                                $ot_start = new DateTime($ot_start);                                                                $ot_end = new DateTime($ot_end);                                                                $difference = dateTimeDiff($ot_start, $ot_end);                                                            }                                                        }                                                        if ($difference != "") {                                                            //echo $min_ot_hours;                                                            $overtime_calc = round($regular_time_val / 60) / 4;                                                            $new_time = $difference->h . "." . $difference->i;                                                            $new_hours = $difference->h * 60 + $difference->i - $overtime_break;                                                            //OT value calculation                                                            if (isset($min_ot_hours)):                                                                $temp = explode(':', $min_ot_hours);                                                                $ot_value = round($temp[0] * 60, 2);                                                                if (isset($temp[1]))                                                                    $ot_value += $temp[1];                                                                if ($new_hours - $ot_threshold >= $ot_value - $ot_threshold) {                                                                    if ($ot_division != 0) {                                                                        if (isset($saturday_holiday) && $saturday_holiday == 1) {                                                                            if ($sun == "Sunday" || $sun == "Saturday") {                                                                                $current_compoff_ot_hrs = floor($new_hours / $ot_division);                                                                                $remind = $new_hours % $ot_division;                                                                                if ($remind + $ot_threshold >= $ot_division) {                                                                                    //echo $no_of_ot_hours;                                                                                    $current_compoff_ot_hrs +=1;                                                                                }                                                                                //	echo $current_compoff_ot_hrs;                                                                                $comp_off_ot_hours += $current_compoff_ot_hrs;                                                                                if (isset($overtime_wages))                                                                                    $total_compoff_ot_earned += round(($current_compoff_ot_hrs / (60 / $ot_division) ) * ($one_hr_salary * $overtime_wages), 2);                                                                            }                                                                            else {                                                                                $current_ot_hrs = floor($new_hours / $ot_division);                                                                                $remind = $new_hours % $ot_division;                                                                                if ($remind + $ot_threshold >= $ot_division) {                                                                                    //echo $no_of_ot_hours;                                                                                    $current_ot_hrs +=1;                                                                                }                                                                                $no_of_ot_hours += $current_ot_hrs;                                                                                if (isset($overtime_wages))                                                                                    $total_ot_earned +=round(( $current_ot_hrs / (60 / $ot_division)) * ($one_hr_salary * $overtime_wages), 2);                                                                            }                                                                        }                                                                        else if ($sun == "Sunday") {                                                                            $current_compoff_ot_hrs = floor($new_hours / $ot_division);                                                                            $remind = $new_hours % $ot_division;                                                                            if ($remind + $ot_threshold >= $ot_division) {                                                                                //echo $no_of_ot_hours;                                                                                $current_compoff_ot_hrs +=1;                                                                            }                                                                            $comp_off_ot_hours += $current_compoff_ot_hrs;                                                                            if (isset($overtime_wages))                                                                                round($total_compoff_ot_earned += ($current_compoff_ot_hrs / (60 / $ot_division)) * ($one_hr_salary * $overtime_wages), 2);                                                                        }                                                                        else {                                                                            $current_ot_hrs = floor($new_hours / $ot_division);                                                                            $remind = $new_hours % $ot_division;                                                                            if ($remind + $ot_threshold >= $ot_division) {                                                                                //echo $no_of_ot_hours;                                                                                $current_ot_hrs += 1;                                                                            }                                                                            $no_of_ot_hours += $current_ot_hrs;                                                                            if (isset($overtime_wages))                                                                                round($total_ot_earned += ($no_of_ot_hours / (60 / $ot_division)) * ($one_hr_salary * $overtime_wages), 2);                                                                        }                                                                    }                                                                    //echo $new_hours." ".$no_of_ot_hours;                                                                }                                                            endif;                                                        }                                                    }                                                    /* $user_overtime = $user_overtime+$interval->h; */                                                }                                            }                                            echo "<td>";                                            if ($current_ot_hrs != 0) {                                                echo round((($current_ot_hrs * $ot_division) / 60), 2);                                                $ot_all += round(($current_ot_hrs / (60 / $ot_division) * $one_hr_da) * 2, 2);                                                $ot_all += round(($current_ot_hrs / (60 / $ot_division) * $one_hr_all) * 2, 2);                                                $yes = 1;                                            } else if ($current_compoff_ot_hrs != 0) {                                                echo round(($current_compoff_ot_hrs * $ot_division) / 60, 2);                                                $ot_all += round(($current_compoff_ot_hrs / (60 / $ot_division) * $one_hr_da) * 2, 2);                                                $ot_all += round(($current_compoff_ot_hrs / (60 / $ot_division) * $one_hr_all) * 2, 2);                                                $yes = 1;                                            }                                            if ($yes == 0) {                                                echo "<i class='icon icon-remove'></i>";                                            }                                            echo "</td>";                                            ?>                                            <?php                                        } else                                            echo "<td>NA</td>";                                    }                                }                                ?>                                <td><?php                                    //echo $days_with_salary;                                    $total_ot = 0;                                    if ($no_of_ot_hours != 0)                                        round($total_ot += ($no_of_ot_hours * $ot_division) / 60, 2);                                    if ($comp_off_ot_hours != 0)                                        round($total_ot += ($comp_off_ot_hours * $ot_division) / 60, 2);                                    if ($total_ot != 0)                                        echo round($total_ot, 2);                                    else                                        echo "-";                                    ?></td>                              <!--  <td><?php                                    $wages = 0;                                    if (isset($user_salary) && !empty($user_salary)) {                                        foreach ($user_salary as $us) {                                            $wages +=$us;                                        }                                        echo round($wages / count($user_salary), 2);                                    }                                    ?></td>                                <td><?php                                    $ot_wages = 0;                                    if (isset($ot_user_salary) && !empty($ot_user_salary)) {                                        foreach ($ot_user_salary as $us) {                                            $ot_wages +=$us;                                        }                                        $new_ot = round($ot_wages / count($ot_user_salary), 2);                                        echo $new_ot;                                    }                                    ?></td>                                <?php if ($proceed == 0) { ?>                                    <td><?= round($total_ot * $new_ot, 2) ?></td>                                    <td></td>                                <?php } ?>-->                            </tr>                            <?php }                         }                    endif;                    if (empty($users)) {                        if ($proceed == 0)                            $colspan = 7 + count($days_array);                        else                            $colspan = 5 + count($days_array);                        echo "<tr><td colspan=" . $colspan . ">No Results Found</td></tr>";                    }                    ?>                </tbody>            </table>        </div>        <?php        if (isset($users) && !empty($users)) {            $end = $start_page + count($users);            $start_page = $start_page + 1;            ?>            <span class="no-display">Showing <?= $start_page ?> to <?= $end ?> of <?= count($no_of_users) ?> records </span>        <?php } ?>        <input type="hidden" id="week_starting_day" value="<?= $week_starting_day ?>"/>        <input type="hidden" id="month_starting_date" value="<?= $month_starting_date ?>"/>        <div class="button_right_align">            <?php            if (isset($links) && $links != NULL)                echo $links;            ?>            <a href="#" id="print" class="btn btn-warning btn-rounded print-align" style="margin-left:50%;"><span class="glyphicon glyphicon-print"></span>Print</a>        </div>    </div></div><!--contentinner--><?phpfunction dateTimeDiff($date1, $date2) {    $alt_diff = new stdClass();    $alt_diff->y = floor(abs($date1->format('U') - $date2->format('U')) / (60 * 60 * 24 * 365));    $alt_diff->m = floor((floor(abs($date1->format('U') - $date2->format('U')) / (60 * 60 * 24)) - ($alt_diff->y * 365)) / 30);    $alt_diff->d = floor(floor(abs($date1->format('U') - $date2->format('U')) / (60 * 60 * 24)) - ($alt_diff->y * 365) - ($alt_diff->m * 30));    $alt_diff->h = floor(floor(abs($date1->format('U') - $date2->format('U')) / (60 * 60)) - ($alt_diff->y * 365 * 24) - ($alt_diff->m * 30 * 24 ) - ($alt_diff->d * 24));    $alt_diff->i = floor(floor(abs($date1->format('U') - $date2->format('U')) / (60)) - ($alt_diff->y * 365 * 24 * 60) - ($alt_diff->m * 30 * 24 * 60) - ($alt_diff->d * 24 * 60) - ($alt_diff->h * 60));    $alt_diff->s = floor(floor(abs($date1->format('U') - $date2->format('U'))) - ($alt_diff->y * 365 * 24 * 60 * 60) - ($alt_diff->m * 30 * 24 * 60 * 60) - ($alt_diff->d * 24 * 60 * 60) - ($alt_diff->h * 60 * 60) - ($alt_diff->i * 60));    $alt_diff->invert = (($date1->format('U') - $date2->format('U')) > 0) ? 0 : 1;    return $alt_diff;}?><script type="text/javascript">    $(document).ready(function () {        user_val = "<?= $user_type ?>";        if (user_val == 2)        {            $("#date_th").hide();        }        $(".reset").click(function () {            $.ajax({                url: BASE_URL + "api/reset_session/",                type: "POST",                data: {class: ct_class, method: ct_method},                success: function (res)                {                    window.location = window.location.pathname;                }            });        });    });</script>